theory OPC_UA_Secure_Communication begin

// Function signature and definition of the equational theory E

builtins: multiset
functions: check_rep/2, fst/1, get_rep/1, h/1, mac/2, pair/2,
           rep/2 [private], sdec/2, senc/2, snd/1, true/0, verifyMac/3
equations:
    check_rep(rep(m, loc), loc) = m,
    fst(<x.1, x.2>) = x.1,
    get_rep(rep(m, loc)) = m,
    sdec(senc(x.1, x.2), x.2) = x.1,
    snd(<x.1, x.2>) = x.2,
    verifyMac(mac(m, sk), m, sk) = true

section{* The OPC UA Secure Conversation protocol *}

rule (modulo E) Init_:
   [ ] --[ Init( ) ]-> [ State_( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) MessageID_rule_:
   [ Fr( ~x ) ] --> [ MID_Sender( ~x ), MID_Receiver( ~x ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_:
   [ State_( ) ] --> [ !Semistate_1( ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_:
   [ Fr( ~prog_1 ), !Semistate_1( ) ]
  --[ ProgressFrom_1( ~prog_1 ) ]->
   [ State_1( ~prog_1 ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_a_1:
   [ State_1( ~prog_1 ), Fr( a ) ] --> [ State_11( ~prog_1, a ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_b_11:
   [ State_11( ~prog_1, a ), Fr( b ) ] --> [ State_111( ~prog_1, a, b ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_kSign_111:
   [ State_111( ~prog_1, a, b ), Fr( kSign ) ]
  -->
   [ State_1111( ~prog_1, a, b, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_kEnc_1111:
   [ State_1111( ~prog_1, a, b, kSign ), Fr( kEnc ) ]
  -->
   [ State_11111( ~prog_1, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Par_11111:
   [ State_11111( ~prog_1, a, b, kEnc, kSign ) ]
  --[ ProgressTo_111112( ~prog_1 ), ProgressTo_111111( ~prog_1 ) ]->
   [
   State_111111( ~prog_1, a, b, kEnc, kSign ),
   State_111112( ~prog_1, a, b, kEnc, kSign )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111111:
   [ State_111111( ~prog_1, a, b, kEnc, kSign ) ]
  -->
   [ !Semistate_1111111( ~prog_1, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111111:
   [ Fr( ~prog_1111111 ), !Semistate_1111111( ~prog_1, a, b, kEnc, kSign ) ]
  --[ ProgressFrom_1111111( ~prog_1111111 ) ]->
   [ State_1111111( ~prog_1, ~prog_1111111, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_a_b__1111111:
   [
   State_1111111( ~prog_1, ~prog_1111111, a, b, kEnc, kSign ), Fr( ~lock8 )
   ]
  --[ ProgressTo_11111111( ~prog_1111111 ), Lock( ~lock8, <a, b> ) ]->
   [ State_11111111( ~lock8, ~prog_1, ~prog_1111111, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_c_seq_11111111:
   [
   Fr( ~prog_111111111 ),
   State_11111111( ~lock8, ~prog_1, ~prog_1111111, a, b, kEnc, kSign ),
   In( <'c', seq> )
   ]
  --[
  ProgressFrom_111111111( ~prog_111111111 ), ChannelInEvent( <'c', seq> )
  ]->
   [
   State_111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                    kEnc, kSign, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Seq_Senta_b_seq_111111111:
   [
   State_111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                    kEnc, kSign, seq
   )
   ]
  --[ Event( ), Seq_Sent( a, b, seq ) ]->
   [
   State_1111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                     kEnc, kSign, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) new_m_1111111111:
   [
   State_1111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                     kEnc, kSign, seq
   ),
   Fr( m )
   ]
  -->
   [
   State_11111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                      kEnc, kSign, m, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Senta_b_m_11111111111:
   [
   State_11111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a, b,
                      kEnc, kSign, m, seq
   )
   ]
  --[ Event( ), Sent( a, b, m ) ]->
   [
   State_111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                       b, kEnc, kSign, m, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111:
   [
   MID_Sender( mid_111111111111 ),
   State_111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                       b, kEnc, kSign, m, seq
   )
   ]
  --[
  Send( mid_111111111111,
        <$MH, $SH, 
         senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>
  )
  ]->
   [
   Out( <$MH, $SH, 
         senc(<seq, m, $pad, mac(<$MH, $SH, seq, m, $pad>, kSign)>, kEnc)>
   ),
   State_1111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                        b, kEnc, kSign, m, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_a_b__1111111111111:
   [
   State_1111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                        b, kEnc, kSign, m, seq
   )
   ]
  --[
  ProgressTo_11111111111111( ~prog_111111111 ), Unlock( ~lock8, <a, b> )
  ]->
   [
   State_11111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                         b, kEnc, kSign, m, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_11111111111111:
   [
   State_11111111111111( ~lock8, ~prog_1, ~prog_1111111, ~prog_111111111, a,
                         b, kEnc, kSign, m, seq
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_0_111112:
   [ State_111112( ~prog_1, a, b, kEnc, kSign ) ]
  -->
   [ !Semistate_1111121( ~prog_1, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) Rep_1_111112:
   [ Fr( ~prog_1111121 ), !Semistate_1111121( ~prog_1, a, b, kEnc, kSign ) ]
  --[ ProgressFrom_1111121( ~prog_1111121 ) ]->
   [ State_1111121( ~prog_1, ~prog_1111121, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) lock_b_a__1111121:
   [
   State_1111121( ~prog_1, ~prog_1111121, a, b, kEnc, kSign ), Fr( ~lock6 )
   ]
  --[ ProgressTo_11111211( ~prog_1111121 ), Lock( ~lock6, <b, a> ) ]->
   [ State_11111211( ~lock6, ~prog_1, ~prog_1111121, a, b, kEnc, kSign ) ]

  /* has exactly the trivial AC variant */

rule (modulo E) in_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__11111211:
   [
   Fr( ~prog_111112111 ),
   State_11111211( ~lock6, ~prog_1, ~prog_1111121, a, b, kEnc, kSign ),
   In( <MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)
       >
   ),
   MID_Receiver( mid_11111211 )
   ]
  --[
  ProgressFrom_111112111( ~prog_111112111 ),
  Receive( mid_11111211,
           <MH, SH, senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, kSign)>, kEnc)>
  )
  ]->
   [
   State_111112111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH,
                    a, b, kEnc, kSign, m, pad, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Seq_Recva_b_seq_111112111:
   [
   State_111112111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH, SH,
                    a, b, kEnc, kSign, m, pad, seq
   )
   ]
  --[ Event( ), Seq_Recv( a, b, seq ) ]->
   [
   State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                     SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) event_Recva_b_m_1111121111:
   [
   State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                     SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]
  --[ Event( ), Recv( a, b, m ) ]->
   [
   State_11111211111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                      SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) unlock_b_a__11111211111:
   [
   State_11111211111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                      SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]
  --[ ProgressTo_111112111111( ~prog_111112111 ), Unlock( ~lock6, <b, a> )
  ]->
   [
   State_111112111111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                       SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]

  /* has exactly the trivial AC variant */

rule (modulo E) Zero_111112111111:
   [
   State_111112111111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111, MH,
                       SH, a, b, kEnc, kSign, m, pad, seq
   )
   ]
  -->
   [ ]

  /* has exactly the trivial AC variant */

restriction A_Counter_Increases:
  "∀ A B seq1 seq2 #i #j.
    (((Seq_Sent( A, B, seq1 ) @ #i) ∧ (Seq_Sent( A, B, seq2 ) @ #j)) ∧
     (#i < #j)) ⇒
    (∃ dif. seq2 = (dif+seq1))"

restriction A_Counter_No_Reuse:
  "∀ A B seq #i #j.
    ((Seq_Sent( A, B, seq ) @ #i) ∧ (Seq_Sent( A, B, seq ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction B_Counter_Counter_Increases:
  "∀ A B seq1 seq2 #i #j.
    (((Seq_Recv( A, B, seq1 ) @ #i) ∧ (Seq_Recv( A, B, seq2 ) @ #j)) ∧
     (#i < #j)) ⇒
    (∃ dif. seq2 = (dif+seq1))"

restriction B_Counter_No_Reuse:
  "∀ A B seq #i #j.
    ((Seq_Recv( A, B, seq ) @ #i) ∧ (Seq_Recv( A, B, seq ) @ #j)) ⇒
    (#i = #j)"
  // safety formula

restriction locking:
  "∀ l x lp #t1 #t3.
    ((Lock( l, x ) @ #t1) ∧ (Lock( lp, x ) @ #t3)) ⇒
    ((((#t1 < #t3) ∧
       (∃ #t2.
         (((((Unlock( l, x ) @ #t2) ∧ (#t1 < #t2)) ∧ (#t2 < #t3)) ∧
           (∀ #t0. (Unlock( l, x ) @ #t0) ⇒ (#t0 = #t2))) ∧
          (∀ lp.1 #t0.
            (Lock( lp.1, x ) @ #t0) ⇒ (((#t0 < #t1) ∨ (#t0 = #t1)) ∨ (#t2 < #t0)))) ∧
         (∀ lp.1 #t0.
           (Unlock( lp.1, x ) @ #t0) ⇒
           (((#t0 < #t1) ∨ (#t2 < #t0)) ∨ (#t2 = #t0))))) ∨
      (#t3 < #t1)) ∨
     (#t1 = #t3))"

restriction single_session:
  "∀ #i #j. ((Init( ) @ #i) ∧ (Init( ) @ #j)) ⇒ (#i = #j)"
  // safety formula

restriction progress_1111121_to_11111211:
  "∀ p #t1.
    (ProgressFrom_1111121( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11111211( p ) @ #t2)"

restriction progress_111112111_to_111112111111:
  "∀ p #t1.
    (ProgressFrom_111112111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_111112111111( p ) @ #t2)"

restriction progress_111111111_to_11111111111111:
  "∀ p #t1.
    (ProgressFrom_111111111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11111111111111( p ) @ #t2)"

restriction progress_1111111_to_11111111:
  "∀ p #t1.
    (ProgressFrom_1111111( p ) @ #t1) ⇒
    (∃ #t2. ProgressTo_11111111( p ) @ #t2)"

restriction progress_1_to_111112:
  "∀ p #t1.
    (ProgressFrom_1( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_111112( p ) @ #t2)"

restriction progress_1_to_111111:
  "∀ p #t1.
    (ProgressFrom_1( p ) @ #t1) ⇒ (∃ #t2. ProgressTo_111111( p ) @ #t2)"

restriction progress_init:
  "∃ #t. Init( ) @ #t"

restriction resilient:
  "∀ #i x y.
    (Send( x, y ) @ #i) ⇒ (∃ #j. (Receive( x, y ) @ #j) ∧ (#i < #j))"

lemma Executable:
  exists-trace "∃ A B m #i. Recv( A, B, m ) @ #i"
/*
guarded formula characterizing all satisfying traces:
"∃ A B m #i. (Recv( A, B, m ) @ #i)"
*/
simplify
solve( State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111,
                         MH, SH, A, B, kEnc, kSign, m, pad, seq
       ) ▶₀ #i )
  case event_Seq_Recva_b_seq_111112111
  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
    case new_kEnc_1111
    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
      case new_kEnc_1111
      solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
             ) ▶₀ #t2.1 )
        case Rep_1_111112
        solve( State_11111211111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                  ~prog_111112111, MH.1, SH.1, a, b, kEnc, kSign, m.1, pad.1, seq.1
               ) ▶₀ #t2.2 )
          case event_Recva_b_m_1111121111
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
              case new_kEnc_1111
              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                case new_kEnc_1111
                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                  case new_kEnc_1111
                  solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                         ) ▶₀ #t2.3 )
                    case Rep_1_111112
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                        case new_kEnc_1111
                        solve( !KU( senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, ~n.3)>, ~n.2)
                               ) @ #vk.4 )
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          solve( State_11111211( ~lock6.1, ~prog_1.1, ~prog_1111121.1, a, b, ~n.2,
                                                 ~n.3
                                 ) ▶₁ #j )
                            case lock_b_a__1111121
                            solve( ((#t2.1 < #vr.22) ∧
                                    (∃ #t2.2.
                                      (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                     ∧
                                      (#t2.1 < #t2.2) ∧
                                      (#t2.2 < #vr.22) ∧
                                      (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2.2) ∧
                                      (∀ lp #t0.
                                        (Lock( lp, <~n.1, ~n> ) @ #t0)
                                       ⇒
                                        ((#t0 < #t2.1) ∨ (#t0 = #t2.1) ∨ (#t2.2 < #t0))) ∧
                                      (∀ lp #t0.
                                        (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                       ⇒
                                        ((#t0 < #t2.1) ∨ (#t2.2 < #t0) ∨ (#t2.2 = #t0)))))  ∥
                                   (#vr.22 < #t2.1)  ∥ (#t2.1 = #vr.22) )
                              case case_3
                              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                                case new_kEnc_1111
                                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                                  case new_kEnc_1111
                                  solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                                         ) ▶₀ #t2.3 )
                                    case Rep_1_111111
                                    solve( State_1111111111111( ~lock8.1, ~prog_1.1, ~prog_1111111.1,
                                                                ~prog_111111111, a, b, kEnc, kSign, m, seq.1
                                           ) ▶₀ #t2.4 )
                                      case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                      solve( State_11111211111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                                                ~prog_111112111, MH.1, SH.1, a, b, kEnc,
                                                                kSign, m, pad.1, seq.1
                                             ) ▶₀ #t2.5 )
                                        case event_Recva_b_m_1111121111
                                        solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                          case new_kEnc_1111
                                          solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                            case new_kEnc_1111
                                            solve( State_1111121( ~prog_1.2, ~prog_1111121, a.1, b.1, kEnc,
                                                                  kSign
                                                   ) ▶₀ #t2.5 )
                                              case Rep_1_111112
                                              solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                                case new_kEnc_1111
                                                solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign
                                                       ) ▶₀ #t2.5 )
                                                  case new_kEnc_1111
                                                  solve( State_11111211( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                                                         a, b, ~n.2, ~n.3
                                                         ) ▶₁ #j.1 )
                                                    case lock_b_a__1111121
                                                    solve( ((#t2.1 < #vr.19) ∧
                                                            (∃ #t2.2.
                                                              (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                                             ∧
                                                              (#t2.1 < #t2.2) ∧
                                                              (#t2.2 < #vr.19) ∧
                                                              (∀ #t0.
                                                                (Unlock( ~lock6, <~n.1, ~n> ) @ #t0)
                                                               ⇒
                                                                #t0 = #t2.2) ∧
                                                              (∀ lp #t0.
                                                                (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #t2.1) ∨
                                                                 (#t0 = #t2.1) ∨
                                                                 (#t2.2 < #t0))) ∧
                                                              (∀ lp #t0.
                                                                (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                               ⇒
                                                                ((#t0 < #t2.1) ∨
                                                                 (#t2.2 < #t0) ∨
                                                                 (#t2.2 = #t0)))))  ∥
                                                           (#vr.19 < #t2.1)  ∥ (#t2.1 = #vr.19) )
                                                      case case_3
                                                      solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                             ) ▶₀ #t2.5 )
                                                        case new_kEnc_1111
                                                        solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                               ) ▶₀ #t2.5 )
                                                          case new_kEnc_1111
                                                          solve( State_1111111( ~prog_1.1, ~prog_1111111, a,
                                                                                b, kEnc, kSign
                                                                 ) ▶₀ #t2.5 )
                                                            case Rep_1_111111
                                                            solve( State_11111211111( ~lock6.1, ~prog_1.1,
                                                                                      ~prog_1111121.1,
                                                                                      ~prog_111112111, MH.1,
                                                                                      SH.1, a, b, kEnc, kSign,
                                                                                      m, pad.1, seq.1
                                                                   ) ▶₀ #t2.5 )
                                                              case event_Recva_b_m_1111121111
                                                              solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                     ) ▶₀ #t2.5 )
                                                                case new_kEnc_1111
                                                                solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                       ) ▶₀ #t2.5 )
                                                                  case new_kEnc_1111
                                                                  solve( State_1111121( ~prog_1.1,
                                                                                        ~prog_1111121, a, b,
                                                                                        kEnc, kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case Rep_1_111112
                                                                    solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                        kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case new_kEnc_1111
                                                                      solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                          kSign
                                                                             ) ▶₀ #t2.5 )
                                                                        case new_kEnc_1111
                                                                        solve( State_11111( ~prog_1, a, b,
                                                                                            kEnc, kSign
                                                                               ) ▶₀ #t2.5 )
                                                                          case new_kEnc_1111
                                                                          solve( State_11111( ~prog_1, a, b,
                                                                                              kEnc, kSign
                                                                                 ) ▶₀ #t2.5 )
                                                                            case new_kEnc_1111
                                                                            solve( State_1111121( ~prog_1.1,
                                                                                                  ~prog_1111121,
                                                                                                  a, b, kEnc,
                                                                                                  kSign
                                                                                   ) ▶₀ #t2.5 )
                                                                              case Rep_1_111112
                                                                              solve( State_11111( ~prog_1, a,
                                                                                                  b, kEnc,
                                                                                                  kSign
                                                                                     ) ▶₀ #t2.5 )
                                                                                case new_kEnc_1111
                                                                                solve( State_11111( ~prog_1,
                                                                                                    a, b,
                                                                                                    kEnc,
                                                                                                    kSign
                                                                                       ) ▶₀ #t2.5 )
                                                                                  case new_kEnc_1111
                                                                                  solve( State_11111( ~prog_1,
                                                                                                      a, b,
                                                                                                      kEnc,
                                                                                                      kSign
                                                                                         ) ▶₀ #t2.5 )
                                                                                    case new_kEnc_1111
                                                                                    solve( State_11111( ~prog_1,
                                                                                                        a, b,
                                                                                                        kEnc,
                                                                                                        kSign
                                                                                           ) ▶₀ #t2.5 )
                                                                                      case new_kEnc_1111
                                                                                      solve( State_1111121( ~prog_1.1,
                                                                                                            ~prog_1111121,
                                                                                                            a,
                                                                                                            b,
                                                                                                            kEnc,
                                                                                                            kSign
                                                                                             ) ▶₀ #t2.5 )
                                                                                        case Rep_1_111112
                                                                                        solve( State_11111( ~prog_1,
                                                                                                            a,
                                                                                                            b,
                                                                                                            kEnc,
                                                                                                            kSign
                                                                                               ) ▶₀ #t2.5 )
                                                                                          case new_kEnc_1111
                                                                                          solve( State_11111( ~prog_1,
                                                                                                              a,
                                                                                                              b,
                                                                                                              kEnc,
                                                                                                              kSign
                                                                                                 ) ▶₀ #t2.5 )
                                                                                            case new_kEnc_1111
                                                                                            solve( State_11111( ~prog_1,
                                                                                                                a,
                                                                                                                b,
                                                                                                                kEnc,
                                                                                                                kSign
                                                                                                   ) ▶₀ #t2.5 )
                                                                                              case new_kEnc_1111
                                                                                              solve( State_11111( ~prog_1,
                                                                                                                  a,
                                                                                                                  b,
                                                                                                                  kEnc,
                                                                                                                  kSign
                                                                                                     ) ▶₀ #t2.5 )
                                                                                                case new_kEnc_1111
                                                                                                solve( State_11111( ~prog_1,
                                                                                                                    a,
                                                                                                                    b,
                                                                                                                    kEnc,
                                                                                                                    kSign
                                                                                                       ) ▶₀ #t2.5 )
                                                                                                  case new_kEnc_1111
                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                      a,
                                                                                                                      b,
                                                                                                                      kEnc,
                                                                                                                      kSign
                                                                                                         ) ▶₀ #t2.5 )
                                                                                                    case new_kEnc_1111
                                                                                                    SOLVED // trace found
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma all_received_were_sent:
  all-traces
  "∀ A B m #i.
    (Recv( A, B, m ) @ #i) ⇒ (∃ #k. (Sent( A, B, m ) @ #k) ∧ (#k < #i))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Recv( A, B, m ) @ #i) ∧ ∀ #k. (Sent( A, B, m ) @ #k) ⇒ ¬(#k < #i)"
*/
simplify
solve( State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111,
                         MH, SH, A, B, kEnc, kSign, m, pad, seq
       ) ▶₀ #i )
  case event_Seq_Recva_b_seq_111112111
  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
    case new_kEnc_1111
    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
      case new_kEnc_1111
      solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
             ) ▶₀ #t2.1 )
        case Rep_1_111112
        solve( State_11111211111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                  ~prog_111112111, MH.1, SH.1, a, b, kEnc, kSign, m.1, pad.1, seq.1
               ) ▶₀ #t2.2 )
          case event_Recva_b_m_1111121111
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
              case new_kEnc_1111
              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                case new_kEnc_1111
                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                  case new_kEnc_1111
                  solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                         ) ▶₀ #t2.3 )
                    case Rep_1_111112
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                        case new_kEnc_1111
                        solve( !KU( senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, ~n.3)>, ~n.2)
                               ) @ #vk.4 )
                          case c_senc
                          by solve( !KU( ~n.2 ) @ #vk.6 )
                        next
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma all_received_were_sent_injective:
  all-traces
  "∀ A B t #i.
    (Recv( A, B, t ) @ #i) ⇒
    (∃ #j.
      ((Sent( A, B, t ) @ #j) ∧ (#j < #i)) ∧
      (¬(∃ A2 B2 #i2. (Recv( A2, B2, t ) @ #i2) ∧ (¬(#i2 = #i)))))"
/*
guarded formula characterizing all counter-examples:
"∃ A B t #i.
  (Recv( A, B, t ) @ #i)
 ∧
  ∀ #j.
   (Sent( A, B, t ) @ #j)
  ⇒
   ((¬(#j < #i)) ∨ (∃ A2 B2 #i2. (Recv( A2, B2, t ) @ #i2) ∧ ¬(#i2 = #i)))"
*/
simplify
solve( State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111,
                         MH, SH, A, B, kEnc, kSign, t, pad, seq
       ) ▶₀ #i )
  case event_Seq_Recva_b_seq_111112111
  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
    case new_kEnc_1111
    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
      case new_kEnc_1111
      solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
             ) ▶₀ #t2.1 )
        case Rep_1_111112
        solve( State_11111211111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                  ~prog_111112111, MH.1, SH.1, a, b, kEnc, kSign, m, pad.1, seq.1
               ) ▶₀ #t2.2 )
          case event_Recva_b_m_1111121111
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
              case new_kEnc_1111
              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                case new_kEnc_1111
                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                  case new_kEnc_1111
                  solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                         ) ▶₀ #t2.3 )
                    case Rep_1_111112
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                        case new_kEnc_1111
                        solve( !KU( senc(<seq, m, pad, mac(<MH, SH, seq, m, pad>, ~n.3)>, ~n.2)
                               ) @ #vk.4 )
                          case c_senc
                          by solve( !KU( ~n.2 ) @ #vk.6 )
                        next
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          solve( (#i2 < #i)  ∥ (#i < #i2) )
                            case case_1
                            solve( State_11111211( ~lock6.2, ~prog_1.2, ~prog_1111121.2, a, b, ~n.2,
                                                   ~n.3
                                   ) ▶₁ #j )
                              case lock_b_a__1111121
                              solve( ((#t2.1 < #vr.22) ∧
                                      (∃ #t2.2.
                                        (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                       ∧
                                        (#t2.1 < #t2.2) ∧
                                        (#t2.2 < #vr.22) ∧
                                        (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2.2) ∧
                                        (∀ lp #t0.
                                          (Lock( lp, <~n.1, ~n> ) @ #t0)
                                         ⇒
                                          ((#t0 < #t2.1) ∨ (#t0 = #t2.1) ∨ (#t2.2 < #t0))) ∧
                                        (∀ lp #t0.
                                          (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                         ⇒
                                          ((#t0 < #t2.1) ∨ (#t2.2 < #t0) ∨ (#t2.2 = #t0)))))  ∥
                                     (#vr.22 < #t2.1)  ∥ (#t2.1 = #vr.22) )
                                case case_1
                                solve( MID_Receiver( ~x ) ▶₃ #j )
                                  case MessageID_rule_
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                      case new_kEnc_1111
                                      solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                             ) ▶₀ #t2.3 )
                                        case Rep_1_111111
                                        solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                    ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                    seq.2
                                               ) ▶₀ #t2.4 )
                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                          solve( State_11111211111( ~lock6.3, ~prog_1.2, ~prog_1111121.3,
                                                                    ~prog_111112111.2, MH.2, SH.2, a, b,
                                                                    kEnc.1, kSign.1, m, pad.2, seq.2
                                                 ) ▶₀ #t2.5 )
                                            case event_Recva_b_m_1111121111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( MID_Receiver( ~x ) ▶₃ #j )
                                  case MessageID_rule_
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                      case new_kEnc_1111
                                      solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                             ) ▶₀ #t2.3 )
                                        case Rep_1_111111
                                        solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                    ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                    seq.2
                                               ) ▶₀ #t2.4 )
                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                          solve( State_11111211111( ~lock6.3, ~prog_1.2, ~prog_1111121.3,
                                                                    ~prog_111112111.2, MH.2, SH.2, a, b,
                                                                    kEnc.1, kSign.1, m, pad.2, seq.2
                                                 ) ▶₀ #t2.5 )
                                            case event_Recva_b_m_1111121111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_3
                                solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                  case new_kEnc_1111
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                           ) ▶₀ #t2.3 )
                                      case Rep_1_111111
                                      solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                  ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                  seq.2
                                             ) ▶₀ #t2.4 )
                                        case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                        solve( State_11111211111( ~lock6.2, ~prog_1.2, ~prog_1111121.2,
                                                                  ~prog_111112111, MH.2, SH.2, a, b, kEnc.1,
                                                                  kSign.1, m, pad.2, seq.2
                                               ) ▶₀ #t2.5 )
                                          case event_Recva_b_m_1111121111
                                          solve( State_1111121111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                                                   ~prog_111112111.1, MH.1, SH.1, A2, B2,
                                                                   kEnc, kSign, ~n.4, pad.1, seq.1
                                                 ) ▶₀ #i2 )
                                            case event_Seq_Recva_b_seq_111112111
                                            solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                              case new_kEnc_1111
                                              solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                                case new_kEnc_1111
                                                solve( State_1111121( ~prog_1.3, ~prog_1111121, a.1, b.1,
                                                                      kEnc, kSign
                                                       ) ▶₀ #t2.5 )
                                                  case Rep_1_111112
                                                  solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign
                                                         ) ▶₀ #t2.5 )
                                                    case new_kEnc_1111
                                                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign
                                                           ) ▶₀ #t2.5 )
                                                      case new_kEnc_1111
                                                      solve( State_11111211( ~lock6.2, ~prog_1.2,
                                                                             ~prog_1111121.2, a, b, ~n.2, ~n.3
                                                             ) ▶₁ #j.1 )
                                                        case lock_b_a__1111121
                                                        solve( ((#t2.1 < #vr.31) ∧
                                                                (∃ #t2.2.
                                                                  (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                                                 ∧
                                                                  (#t2.1 < #t2.2) ∧
                                                                  (#t2.2 < #vr.31) ∧
                                                                  (∀ #t0.
                                                                    (Unlock( ~lock6, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    #t0 = #t2.2) ∧
                                                                  (∀ lp #t0.
                                                                    (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    ((#t0 < #t2.1) ∨
                                                                     (#t0 = #t2.1) ∨
                                                                     (#t2.2 < #t0))) ∧
                                                                  (∀ lp #t0.
                                                                    (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    ((#t0 < #t2.1) ∨
                                                                     (#t2.2 < #t0) ∨
                                                                     (#t2.2 = #t0)))))  ∥
                                                               (#vr.31 < #t2.1)  ∥ (#t2.1 = #vr.31) )
                                                          case case_1
                                                          solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                            case MessageID_rule_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                            case MessageID_rule_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_3
                                                          solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                 ) ▶₀ #t2.5 )
                                                            case new_kEnc_1111
                                                            solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                   ) ▶₀ #t2.5 )
                                                              case new_kEnc_1111
                                                              solve( State_1111111( ~prog_1.2, ~prog_1111111,
                                                                                    a, b, kEnc, kSign
                                                                     ) ▶₀ #t2.5 )
                                                                case Rep_1_111111
                                                                solve( State_11111211111( ~lock6.2, ~prog_1.2,
                                                                                          ~prog_1111121.2,
                                                                                          ~prog_111112111,
                                                                                          MH.2, SH.2, a, b,
                                                                                          kEnc, kSign, m,
                                                                                          pad.2, seq.2
                                                                       ) ▶₀ #t2.5 )
                                                                  case event_Recva_b_m_1111121111
                                                                  solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                      kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case new_kEnc_1111
                                                                    solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                        kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case new_kEnc_1111
                                                                      solve( State_1111121( ~prog_1.2,
                                                                                            ~prog_1111121, a,
                                                                                            b, kEnc, kSign
                                                                             ) ▶₀ #t2.5 )
                                                                        case Rep_1_111112
                                                                        solve( State_11111( ~prog_1.1, a, b,
                                                                                            kEnc, kSign
                                                                               ) ▶₀ #t2.5 )
                                                                          case new_kEnc_1111
                                                                          solve( State_11111( ~prog_1.1, a, b,
                                                                                              kEnc, kSign
                                                                                 ) ▶₀ #t2.6 )
                                                                            case new_kEnc_1111
                                                                            solve( State_1111121( ~prog_1.2,
                                                                                                  ~prog_1111121.1,
                                                                                                  a, b, kEnc,
                                                                                                  kSign
                                                                                   ) ▶₀ #t2.6 )
                                                                              case Rep_1_111112
                                                                              solve( State_11111211111( ~lock6.2,
                                                                                                        ~prog_1.2,
                                                                                                        ~prog_1111121.2,
                                                                                                        ~prog_111112111.1,
                                                                                                        MH.2,
                                                                                                        SH.2,
                                                                                                        a, b,
                                                                                                        kEnc,
                                                                                                        kSign,
                                                                                                        m,
                                                                                                        pad.2,
                                                                                                        seq.2
                                                                                     ) ▶₀ #t2.7 )
                                                                                case event_Recva_b_m_1111121111
                                                                                solve( State_11111( ~prog_1,
                                                                                                    a, b,
                                                                                                    kEnc,
                                                                                                    kSign
                                                                                       ) ▶₀ #t2.8 )
                                                                                  case new_kEnc_1111
                                                                                  solve( State_11111( ~prog_1,
                                                                                                      a, b,
                                                                                                      kEnc,
                                                                                                      kSign
                                                                                         ) ▶₀ #t2.8 )
                                                                                    case new_kEnc_1111
                                                                                    solve( State_11111( ~prog_1,
                                                                                                        a, b,
                                                                                                        kEnc,
                                                                                                        kSign
                                                                                           ) ▶₀ #t2.8 )
                                                                                      case new_kEnc_1111
                                                                                      solve( State_11111( ~prog_1,
                                                                                                          a,
                                                                                                          b,
                                                                                                          kEnc,
                                                                                                          kSign
                                                                                             ) ▶₀ #t2.8 )
                                                                                        case new_kEnc_1111
                                                                                        solve( State_1111121( ~prog_1.2,
                                                                                                              ~prog_1111121,
                                                                                                              a,
                                                                                                              b,
                                                                                                              kEnc,
                                                                                                              kSign
                                                                                               ) ▶₀ #t2.8 )
                                                                                          case Rep_1_111112
                                                                                          solve( State_11111( ~prog_1,
                                                                                                              a,
                                                                                                              b,
                                                                                                              kEnc,
                                                                                                              kSign
                                                                                                 ) ▶₀ #t2.8 )
                                                                                            case new_kEnc_1111
                                                                                            solve( State_11111( ~prog_1,
                                                                                                                a,
                                                                                                                b,
                                                                                                                kEnc,
                                                                                                                kSign
                                                                                                   ) ▶₀ #t2.8 )
                                                                                              case new_kEnc_1111
                                                                                              solve( State_11111( ~prog_1,
                                                                                                                  a,
                                                                                                                  b,
                                                                                                                  kEnc,
                                                                                                                  kSign
                                                                                                     ) ▶₀ #t2.8 )
                                                                                                case new_kEnc_1111
                                                                                                solve( State_11111( ~prog_1,
                                                                                                                    a,
                                                                                                                    b,
                                                                                                                    kEnc,
                                                                                                                    kSign
                                                                                                       ) ▶₀ #t2.8 )
                                                                                                  case new_kEnc_1111
                                                                                                  solve( State_1111121( ~prog_1.2,
                                                                                                                        ~prog_1111121,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                         ) ▶₀ #t2.8 )
                                                                                                    case Rep_1_111112
                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                           ) ▶₀ #t2.8 )
                                                                                                      case new_kEnc_1111
                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                          a,
                                                                                                                          b,
                                                                                                                          kEnc,
                                                                                                                          kSign
                                                                                                             ) ▶₀ #t2.8 )
                                                                                                        case new_kEnc_1111
                                                                                                        solve( State_11111( ~prog_1.1,
                                                                                                                            a,
                                                                                                                            b,
                                                                                                                            kEnc,
                                                                                                                            kSign
                                                                                                               ) ▶₀ #t2.8 )
                                                                                                          case new_kEnc_1111
                                                                                                          solve( State_11111( ~prog_1.1,
                                                                                                                              a,
                                                                                                                              b,
                                                                                                                              kEnc,
                                                                                                                              kSign
                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                            case new_kEnc_1111
                                                                                                            solve( State_11111( ~prog_1.1,
                                                                                                                                a,
                                                                                                                                b,
                                                                                                                                kEnc,
                                                                                                                                kSign
                                                                                                                   ) ▶₀ #t2.8 )
                                                                                                              case new_kEnc_1111
                                                                                                              solve( State_11111( ~prog_1.1,
                                                                                                                                  a,
                                                                                                                                  b,
                                                                                                                                  kEnc,
                                                                                                                                  kSign
                                                                                                                     ) ▶₀ #t2.8 )
                                                                                                                case new_kEnc_1111
                                                                                                                solve( State_1111121( ~prog_1.2,
                                                                                                                                      ~prog_1111121.1,
                                                                                                                                      a,
                                                                                                                                      b,
                                                                                                                                      kEnc,
                                                                                                                                      kSign
                                                                                                                       ) ▶₀ #t2.8 )
                                                                                                                  case Rep_1_111112
                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                      a,
                                                                                                                                      b,
                                                                                                                                      kEnc,
                                                                                                                                      kSign
                                                                                                                         ) ▶₀ #t2.8 )
                                                                                                                    case new_kEnc_1111
                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                        a,
                                                                                                                                        b,
                                                                                                                                        kEnc,
                                                                                                                                        kSign
                                                                                                                           ) ▶₀ #t2.8 )
                                                                                                                      case new_kEnc_1111
                                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                                          a,
                                                                                                                                          b,
                                                                                                                                          kEnc,
                                                                                                                                          kSign
                                                                                                                             ) ▶₀ #t2.8 )
                                                                                                                        case new_kEnc_1111
                                                                                                                        solve( State_11111( ~prog_1,
                                                                                                                                            a,
                                                                                                                                            b,
                                                                                                                                            kEnc,
                                                                                                                                            kSign
                                                                                                                               ) ▶₀ #t2.8 )
                                                                                                                          case new_kEnc_1111
                                                                                                                          solve( State_11111( ~prog_1.1,
                                                                                                                                              a,
                                                                                                                                              b,
                                                                                                                                              kEnc,
                                                                                                                                              kSign
                                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                                            case new_kEnc_1111
                                                                                                                            solve( State_11111( ~prog_1.1,
                                                                                                                                                a,
                                                                                                                                                b,
                                                                                                                                                kEnc,
                                                                                                                                                kSign
                                                                                                                                   ) ▶₀ #t2.8 )
                                                                                                                              case new_kEnc_1111
                                                                                                                              solve( !KU( senc(<
                                                                                                                                                seq.1, 
                                                                                                                                                ~n.4, 
                                                                                                                                                pad.1, 
                                                                                                                                                mac(<
                                                                                                                                                     MH.1, 
                                                                                                                                                     SH.1, 
                                                                                                                                                     seq.1, 
                                                                                                                                                     ~n.4, 
                                                                                                                                                     pad.1
                                                                                                                                                    >,
                                                                                                                                                    ~n.8)
                                                                                                                                               >,
                                                                                                                                               ~n.7)
                                                                                                                                     ) @ #vk.12 )
                                                                                                                                case c_senc
                                                                                                                                by solve( !KU( ~n.7
                                                                                                                                          ) @ #vk.14 )
                                                                                                                              next
                                                                                                                                case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                by contradiction
                                                                                                                                   /*
                                                                                                                                   cyclic
                                                                                                                                   */
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    qed
                                                                                                                  qed
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      qed
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          next
                            case case_2
                            solve( State_11111211( ~lock6.2, ~prog_1.2, ~prog_1111121.2, a, b, ~n.2,
                                                   ~n.3
                                   ) ▶₁ #j )
                              case lock_b_a__1111121
                              solve( ((#t2.1 < #vr.22) ∧
                                      (∃ #t2.2.
                                        (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                       ∧
                                        (#t2.1 < #t2.2) ∧
                                        (#t2.2 < #vr.22) ∧
                                        (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2.2) ∧
                                        (∀ lp #t0.
                                          (Lock( lp, <~n.1, ~n> ) @ #t0)
                                         ⇒
                                          ((#t0 < #t2.1) ∨ (#t0 = #t2.1) ∨ (#t2.2 < #t0))) ∧
                                        (∀ lp #t0.
                                          (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                         ⇒
                                          ((#t0 < #t2.1) ∨ (#t2.2 < #t0) ∨ (#t2.2 = #t0)))))  ∥
                                     (#vr.22 < #t2.1)  ∥ (#t2.1 = #vr.22) )
                                case case_1
                                solve( MID_Receiver( ~x ) ▶₃ #j )
                                  case MessageID_rule_
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                      case new_kEnc_1111
                                      solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                             ) ▶₀ #t2.3 )
                                        case Rep_1_111111
                                        solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                    ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                    seq.2
                                               ) ▶₀ #t2.4 )
                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                          solve( State_11111211111( ~lock6.3, ~prog_1.2, ~prog_1111121.3,
                                                                    ~prog_111112111.2, MH.2, SH.2, a, b,
                                                                    kEnc.1, kSign.1, m, pad.2, seq.2
                                                 ) ▶₀ #t2.5 )
                                            case event_Recva_b_m_1111121111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_2
                                solve( MID_Receiver( ~x ) ▶₃ #j )
                                  case MessageID_rule_
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                      case new_kEnc_1111
                                      solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                             ) ▶₀ #t2.3 )
                                        case Rep_1_111111
                                        solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                    ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                    seq.2
                                               ) ▶₀ #t2.4 )
                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                          solve( State_11111211111( ~lock6.3, ~prog_1.2, ~prog_1111121.3,
                                                                    ~prog_111112111.2, MH.2, SH.2, a, b,
                                                                    kEnc.1, kSign.1, m, pad.2, seq.2
                                                 ) ▶₀ #t2.5 )
                                            case event_Recva_b_m_1111121111
                                            by contradiction /* cyclic */
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              next
                                case case_3
                                solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                  case new_kEnc_1111
                                  solve( State_11111( ~prog_1, a, b, kEnc.1, kSign.1 ) ▶₀ #t2.3 )
                                    case new_kEnc_1111
                                    solve( State_1111111( ~prog_1.2, ~prog_1111111, a, b, kEnc.1, kSign.1
                                           ) ▶₀ #t2.3 )
                                      case Rep_1_111111
                                      solve( State_1111111111111( ~lock8.1, ~prog_1.2, ~prog_1111111.1,
                                                                  ~prog_111111111, a, b, kEnc.1, kSign.1, m,
                                                                  seq.2
                                             ) ▶₀ #t2.4 )
                                        case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                        solve( State_11111211111( ~lock6.2, ~prog_1.2, ~prog_1111121.2,
                                                                  ~prog_111112111, MH.2, SH.2, a, b, kEnc.1,
                                                                  kSign.1, m, pad.2, seq.2
                                               ) ▶₀ #t2.5 )
                                          case event_Recva_b_m_1111121111
                                          solve( State_1111121111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                                                   ~prog_111112111.1, MH.1, SH.1, A2, B2,
                                                                   kEnc, kSign, ~n.4, pad.1, seq.1
                                                 ) ▶₀ #i2 )
                                            case event_Seq_Recva_b_seq_111112111
                                            solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                              case new_kEnc_1111
                                              solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                                case new_kEnc_1111
                                                solve( State_1111121( ~prog_1.3, ~prog_1111121, a.1, b.1,
                                                                      kEnc, kSign
                                                       ) ▶₀ #t2.5 )
                                                  case Rep_1_111112
                                                  solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign
                                                         ) ▶₀ #t2.5 )
                                                    case new_kEnc_1111
                                                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign
                                                           ) ▶₀ #t2.5 )
                                                      case new_kEnc_1111
                                                      solve( State_11111211( ~lock6.2, ~prog_1.2,
                                                                             ~prog_1111121.2, a, b, ~n.2, ~n.3
                                                             ) ▶₁ #j.1 )
                                                        case lock_b_a__1111121
                                                        solve( ((#t2.1 < #vr.31) ∧
                                                                (∃ #t2.2.
                                                                  (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                                                 ∧
                                                                  (#t2.1 < #t2.2) ∧
                                                                  (#t2.2 < #vr.31) ∧
                                                                  (∀ #t0.
                                                                    (Unlock( ~lock6, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    #t0 = #t2.2) ∧
                                                                  (∀ lp #t0.
                                                                    (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    ((#t0 < #t2.1) ∨
                                                                     (#t0 = #t2.1) ∨
                                                                     (#t2.2 < #t0))) ∧
                                                                  (∀ lp #t0.
                                                                    (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                                   ⇒
                                                                    ((#t0 < #t2.1) ∨
                                                                     (#t2.2 < #t0) ∨
                                                                     (#t2.2 = #t0)))))  ∥
                                                               (#vr.31 < #t2.1)  ∥ (#t2.1 = #vr.31) )
                                                          case case_1
                                                          solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                            case MessageID_rule_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_2
                                                          solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                            case MessageID_rule_
                                                            by contradiction /* cyclic */
                                                          qed
                                                        next
                                                          case case_3
                                                          solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                 ) ▶₀ #t2.5 )
                                                            case new_kEnc_1111
                                                            solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                   ) ▶₀ #t2.5 )
                                                              case new_kEnc_1111
                                                              solve( State_1111111( ~prog_1.2, ~prog_1111111,
                                                                                    a, b, kEnc, kSign
                                                                     ) ▶₀ #t2.5 )
                                                                case Rep_1_111111
                                                                solve( State_11111211111( ~lock6.2, ~prog_1.2,
                                                                                          ~prog_1111121.2,
                                                                                          ~prog_111112111,
                                                                                          MH.2, SH.2, a, b,
                                                                                          kEnc, kSign, m,
                                                                                          pad.2, seq.2
                                                                       ) ▶₀ #t2.5 )
                                                                  case event_Recva_b_m_1111121111
                                                                  solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                      kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case new_kEnc_1111
                                                                    solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                        kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case new_kEnc_1111
                                                                      solve( State_1111121( ~prog_1.2,
                                                                                            ~prog_1111121, a,
                                                                                            b, kEnc, kSign
                                                                             ) ▶₀ #t2.5 )
                                                                        case Rep_1_111112
                                                                        solve( State_11111( ~prog_1.1, a, b,
                                                                                            kEnc, kSign
                                                                               ) ▶₀ #t2.5 )
                                                                          case new_kEnc_1111
                                                                          solve( State_11111( ~prog_1.1, a, b,
                                                                                              kEnc, kSign
                                                                                 ) ▶₀ #t2.6 )
                                                                            case new_kEnc_1111
                                                                            solve( State_1111121( ~prog_1.2,
                                                                                                  ~prog_1111121.1,
                                                                                                  a, b, kEnc,
                                                                                                  kSign
                                                                                   ) ▶₀ #t2.6 )
                                                                              case Rep_1_111112
                                                                              solve( State_11111211111( ~lock6.2,
                                                                                                        ~prog_1.2,
                                                                                                        ~prog_1111121.2,
                                                                                                        ~prog_111112111.1,
                                                                                                        MH.2,
                                                                                                        SH.2,
                                                                                                        a, b,
                                                                                                        kEnc,
                                                                                                        kSign,
                                                                                                        m,
                                                                                                        pad.2,
                                                                                                        seq.2
                                                                                     ) ▶₀ #t2.7 )
                                                                                case event_Recva_b_m_1111121111
                                                                                solve( State_11111( ~prog_1,
                                                                                                    a, b,
                                                                                                    kEnc,
                                                                                                    kSign
                                                                                       ) ▶₀ #t2.8 )
                                                                                  case new_kEnc_1111
                                                                                  solve( State_11111( ~prog_1,
                                                                                                      a, b,
                                                                                                      kEnc,
                                                                                                      kSign
                                                                                         ) ▶₀ #t2.8 )
                                                                                    case new_kEnc_1111
                                                                                    solve( State_11111( ~prog_1,
                                                                                                        a, b,
                                                                                                        kEnc,
                                                                                                        kSign
                                                                                           ) ▶₀ #t2.8 )
                                                                                      case new_kEnc_1111
                                                                                      solve( State_11111( ~prog_1,
                                                                                                          a,
                                                                                                          b,
                                                                                                          kEnc,
                                                                                                          kSign
                                                                                             ) ▶₀ #t2.8 )
                                                                                        case new_kEnc_1111
                                                                                        solve( State_1111121( ~prog_1.2,
                                                                                                              ~prog_1111121,
                                                                                                              a,
                                                                                                              b,
                                                                                                              kEnc,
                                                                                                              kSign
                                                                                               ) ▶₀ #t2.8 )
                                                                                          case Rep_1_111112
                                                                                          solve( State_11111( ~prog_1,
                                                                                                              a,
                                                                                                              b,
                                                                                                              kEnc,
                                                                                                              kSign
                                                                                                 ) ▶₀ #t2.8 )
                                                                                            case new_kEnc_1111
                                                                                            solve( State_11111( ~prog_1,
                                                                                                                a,
                                                                                                                b,
                                                                                                                kEnc,
                                                                                                                kSign
                                                                                                   ) ▶₀ #t2.8 )
                                                                                              case new_kEnc_1111
                                                                                              solve( State_11111( ~prog_1,
                                                                                                                  a,
                                                                                                                  b,
                                                                                                                  kEnc,
                                                                                                                  kSign
                                                                                                     ) ▶₀ #t2.8 )
                                                                                                case new_kEnc_1111
                                                                                                solve( State_11111( ~prog_1,
                                                                                                                    a,
                                                                                                                    b,
                                                                                                                    kEnc,
                                                                                                                    kSign
                                                                                                       ) ▶₀ #t2.8 )
                                                                                                  case new_kEnc_1111
                                                                                                  solve( State_1111121( ~prog_1.2,
                                                                                                                        ~prog_1111121,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                         ) ▶₀ #t2.8 )
                                                                                                    case Rep_1_111112
                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                           ) ▶₀ #t2.8 )
                                                                                                      case new_kEnc_1111
                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                          a,
                                                                                                                          b,
                                                                                                                          kEnc,
                                                                                                                          kSign
                                                                                                             ) ▶₀ #t2.8 )
                                                                                                        case new_kEnc_1111
                                                                                                        solve( State_11111( ~prog_1.1,
                                                                                                                            a,
                                                                                                                            b,
                                                                                                                            kEnc,
                                                                                                                            kSign
                                                                                                               ) ▶₀ #t2.8 )
                                                                                                          case new_kEnc_1111
                                                                                                          solve( State_11111( ~prog_1.1,
                                                                                                                              a,
                                                                                                                              b,
                                                                                                                              kEnc,
                                                                                                                              kSign
                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                            case new_kEnc_1111
                                                                                                            solve( State_11111( ~prog_1.1,
                                                                                                                                a,
                                                                                                                                b,
                                                                                                                                kEnc,
                                                                                                                                kSign
                                                                                                                   ) ▶₀ #t2.8 )
                                                                                                              case new_kEnc_1111
                                                                                                              solve( State_11111( ~prog_1.1,
                                                                                                                                  a,
                                                                                                                                  b,
                                                                                                                                  kEnc,
                                                                                                                                  kSign
                                                                                                                     ) ▶₀ #t2.8 )
                                                                                                                case new_kEnc_1111
                                                                                                                solve( State_1111121( ~prog_1.2,
                                                                                                                                      ~prog_1111121.1,
                                                                                                                                      a,
                                                                                                                                      b,
                                                                                                                                      kEnc,
                                                                                                                                      kSign
                                                                                                                       ) ▶₀ #t2.8 )
                                                                                                                  case Rep_1_111112
                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                      a,
                                                                                                                                      b,
                                                                                                                                      kEnc,
                                                                                                                                      kSign
                                                                                                                         ) ▶₀ #t2.8 )
                                                                                                                    case new_kEnc_1111
                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                        a,
                                                                                                                                        b,
                                                                                                                                        kEnc,
                                                                                                                                        kSign
                                                                                                                           ) ▶₀ #t2.8 )
                                                                                                                      case new_kEnc_1111
                                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                                          a,
                                                                                                                                          b,
                                                                                                                                          kEnc,
                                                                                                                                          kSign
                                                                                                                             ) ▶₀ #t2.8 )
                                                                                                                        case new_kEnc_1111
                                                                                                                        solve( State_11111( ~prog_1,
                                                                                                                                            a,
                                                                                                                                            b,
                                                                                                                                            kEnc,
                                                                                                                                            kSign
                                                                                                                               ) ▶₀ #t2.8 )
                                                                                                                          case new_kEnc_1111
                                                                                                                          solve( State_11111( ~prog_1.1,
                                                                                                                                              a,
                                                                                                                                              b,
                                                                                                                                              kEnc,
                                                                                                                                              kSign
                                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                                            case new_kEnc_1111
                                                                                                                            solve( State_11111( ~prog_1.1,
                                                                                                                                                a,
                                                                                                                                                b,
                                                                                                                                                kEnc,
                                                                                                                                                kSign
                                                                                                                                   ) ▶₀ #t2.8 )
                                                                                                                              case new_kEnc_1111
                                                                                                                              solve( !KU( senc(<
                                                                                                                                                seq.1, 
                                                                                                                                                ~n.4, 
                                                                                                                                                pad.1, 
                                                                                                                                                mac(<
                                                                                                                                                     MH.1, 
                                                                                                                                                     SH.1, 
                                                                                                                                                     seq.1, 
                                                                                                                                                     ~n.4, 
                                                                                                                                                     pad.1
                                                                                                                                                    >,
                                                                                                                                                    ~n.8)
                                                                                                                                               >,
                                                                                                                                               ~n.7)
                                                                                                                                     ) @ #vk.12 )
                                                                                                                                case c_senc
                                                                                                                                by solve( !KU( ~n.7
                                                                                                                                          ) @ #vk.14 )
                                                                                                                              next
                                                                                                                                case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                by contradiction
                                                                                                                                   /*
                                                                                                                                   cyclic
                                                                                                                                   */
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    qed
                                                                                                                  qed
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      qed
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma order:
  all-traces
  "∀ A B m m2 #i #j.
    (((Recv( A, B, m ) @ #i) ∧ (Recv( A, B, m2 ) @ #j)) ∧ (#i < #j)) ⇒
    (∃ #k #l.
      ((Sent( A, B, m ) @ #k) ∧ (Sent( A, B, m2 ) @ #l)) ∧ (#k < #l))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m m2 #i #j.
  (Recv( A, B, m ) @ #i) ∧ (Recv( A, B, m2 ) @ #j)
 ∧
  (#i < #j) ∧
  (∀ #k #l. (Sent( A, B, m ) @ #k) ∧ (Sent( A, B, m2 ) @ #l) ⇒ ¬(#k < #l))"
*/
simplify
solve( State_1111121111( ~lock6, ~prog_1, ~prog_1111121, ~prog_111112111,
                         MH, SH, A, B, kEnc, kSign, m, pad, seq
       ) ▶₀ #i )
  case event_Seq_Recva_b_seq_111112111
  solve( State_1111121111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                           ~prog_111112111.1, MH.1, SH.1, ~n, ~n.1, kEnc, kSign, m2, pad.1, seq.1
         ) ▶₀ #j )
    case event_Seq_Recva_b_seq_111112111
    solve( (¬(#vr < #vr.13))  ∥ (∃ dif. (seq.1 = (dif+seq))) )
      case case_1
      solve( (¬(#vr.13 < #vr))  ∥ (∃ dif. (seq = (dif+seq.1))) )
        case case_1
        solve( ((#vr.2 < #vr.15) ∧
                (∃ #t2.
                  (Unlock( ~lock6, <~n.1, ~n> ) @ #t2)
                 ∧
                  (#vr.2 < #t2) ∧
                  (#t2 < #vr.15) ∧
                  (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t0 = #vr.2) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.15 < #vr.2)  ∥ (#vr.2 = #vr.15) )
          case case_1
          solve( (#vr = #vr.13)  ∥ (#vr.13 < #vr) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( (#vr = #vr.13)  ∥ (#vr.13 < #vr) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( ((#vr.2 < #vr.15) ∧
                (∃ #t2.
                  (Unlock( ~lock6, <~n.1, ~n> ) @ #t2)
                 ∧
                  (#vr.2 < #t2) ∧
                  (#t2 < #vr.15) ∧
                  (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t0 = #vr.2) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.15 < #vr.2)  ∥ (#vr.2 = #vr.15) )
          case case_1
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111112
                solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                          ~prog_111112111, MH.2, SH.2, a, b, kEnc, kSign, m.1, pad.2, seq.1
                       ) ▶₀ #t2.2 )
                  case event_Recva_b_m_1111121111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111112
                solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                          ~prog_111112111, MH.2, SH.2, a, b, kEnc, kSign, m.1, pad.2, seq.1
                       ) ▶₀ #t2.2 )
                  case event_Recva_b_m_1111121111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111121( ~prog_1.1, ~prog_1111121.1, a, b, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111112
                        solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                                  ~prog_111112111.1, MH.2, SH.2, a, b, kEnc, kSign, m.1,
                                                  pad.2, seq.1
                               ) ▶₀ #t2.4 )
                          case event_Recva_b_m_1111121111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (¬(#vr.13 < #vr))  ∥ (∃ dif.1. (seq = (dif+seq+dif.1))) )
        case case_1
        solve( ((#vr.2 < #vr.15) ∧
                (∃ #t2.
                  (Unlock( ~lock6, <~n.1, ~n> ) @ #t2)
                 ∧
                  (#vr.2 < #t2) ∧
                  (#t2 < #vr.15) ∧
                  (∀ #t0. (Unlock( ~lock6, <~n.1, ~n> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t0 = #vr.2) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n.1, ~n> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.2) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.15 < #vr.2)  ∥ (#vr.2 = #vr.15) )
          case case_1
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111112
                solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                          ~prog_111112111, MH.2, SH.2, a, b, kEnc, kSign, m.1, pad.2, seq.1
                       ) ▶₀ #t2.2 )
                  case event_Recva_b_m_1111121111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111121( ~prog_1.1, ~prog_1111121.1, a, b, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111112
                        solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                                  ~prog_111112111.1, MH.2, SH.2, a, b, kEnc, kSign, m.1,
                                                  pad.2, seq.1
                               ) ▶₀ #t2.4 )
                          case event_Recva_b_m_1111121111
                          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                            case new_kEnc_1111
                            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                              case new_kEnc_1111
                              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                case new_kEnc_1111
                                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                  case new_kEnc_1111
                                  solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                                         ) ▶₀ #t2.5 )
                                    case Rep_1_111112
                                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                      case new_kEnc_1111
                                      solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                        case new_kEnc_1111
                                        solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                          case new_kEnc_1111
                                          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                            case new_kEnc_1111
                                            solve( State_1111121( ~prog_1.1, ~prog_1111121.1, a, b, kEnc,
                                                                  kSign
                                                   ) ▶₀ #t2.5 )
                                              case Rep_1_111112
                                              solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                                case new_kEnc_1111
                                                solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                                  case new_kEnc_1111
                                                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.5 )
                                                    case new_kEnc_1111
                                                    solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                           ) ▶₀ #t2.5 )
                                                      case new_kEnc_1111
                                                      solve( Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2 )
                                                        case unlock_b_a__11111211111
                                                        solve( !KU( senc(<seq, m, pad, 
                                                                          mac(<MH, SH, seq, m, pad>, ~n.3)>,
                                                                         ~n.2)
                                                               ) @ #vk.4 )
                                                          case c_senc
                                                          by solve( !KU( ~n.2 ) @ #vk.11 )
                                                        next
                                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                          solve( State_11111211( ~lock6.2, ~prog_1.1,
                                                                                 ~prog_1111121.2, a, b, ~n.2,
                                                                                 ~n.3
                                                                 ) ▶₁ #j.1 )
                                                            case lock_b_a__1111121
                                                            solve( ((#t2.1 < #vr.26) ∧
                                                                    (∃ #t2.2.
                                                                      (Unlock( ~lock6, <~n.1, ~n> ) @ #t2.2)
                                                                     ∧
                                                                      (#t2.1 < #t2.2) ∧
                                                                      (#t2.2 < #vr.26) ∧
                                                                      (∀ #t0.
                                                                        (Unlock( ~lock6, <~n.1, ~n> ) @ #t0)
                                                                       ⇒
                                                                        #t0 = #t2.2) ∧
                                                                      (∀ lp #t0.
                                                                        (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                                       ⇒
                                                                        ((#t0 < #t2.1) ∨
                                                                         (#t0 = #t2.1) ∨
                                                                         (#t2.2 < #t0))) ∧
                                                                      (∀ lp #t0.
                                                                        (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                                       ⇒
                                                                        ((#t0 < #t2.1) ∨
                                                                         (#t2.2 < #t0) ∨
                                                                         (#t2.2 = #t0)))))  ∥
                                                                   (#vr.26 < #t2.1)  ∥ (#t2.1 = #vr.26) )
                                                              case case_1
                                                              solve( ((#t2.3 < #vr.26) ∧
                                                                      (∃ #t2.4.
                                                                        (Unlock( ~lock6.1, <~n.1, ~n>
                                                                         ) @ #t2.4)
                                                                       ∧
                                                                        (#t2.3 < #t2.4) ∧
                                                                        (#t2.4 < #vr.26) ∧
                                                                        (∀ #t0.
                                                                          (Unlock( ~lock6.1, <~n.1, ~n>
                                                                           ) @ #t0)
                                                                         ⇒
                                                                          #t0 = #t2.4) ∧
                                                                        (∀ lp #t0.
                                                                          (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                                         ⇒
                                                                          ((#t0 < #t2.3) ∨
                                                                           (#t0 = #t2.3) ∨
                                                                           (#t2.4 < #t0))) ∧
                                                                        (∀ lp #t0.
                                                                          (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                                         ⇒
                                                                          ((#t0 < #t2.3) ∨
                                                                           (#t2.4 < #t0) ∨
                                                                           (#t2.4 = #t0)))))  ∥
                                                                     (#vr.26 < #t2.3)  ∥ (#t2.3 = #vr.26) )
                                                                case case_1
                                                                solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                                  case MessageID_rule_
                                                                  solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                      kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case new_kEnc_1111
                                                                    solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                        kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case new_kEnc_1111
                                                                      solve( State_1111111( ~prog_1.1,
                                                                                            ~prog_1111111, a,
                                                                                            b, kEnc, kSign
                                                                             ) ▶₀ #t2.5 )
                                                                        case Rep_1_111111
                                                                        solve( State_1111111111111( ~lock8.1,
                                                                                                    ~prog_1.1,
                                                                                                    ~prog_1111111.1,
                                                                                                    ~prog_111111111,
                                                                                                    a, b,
                                                                                                    kEnc,
                                                                                                    kSign, m,
                                                                                                    seq.1
                                                                               ) ▶₀ #t2.6 )
                                                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                          solve( State_11111211111( ~lock6.3,
                                                                                                    ~prog_1.1,
                                                                                                    ~prog_1111121.3,
                                                                                                    ~prog_111112111.2,
                                                                                                    MH.2,
                                                                                                    SH.2, a,
                                                                                                    b, kEnc,
                                                                                                    kSign, m,
                                                                                                    pad.2,
                                                                                                    seq.1
                                                                                 ) ▶₀ #t2.7 )
                                                                            case event_Recva_b_m_1111121111
                                                                            by contradiction /* cyclic */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              next
                                                                case case_2
                                                                solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                                  case MessageID_rule_
                                                                  solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                      kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case new_kEnc_1111
                                                                    solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                        kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case new_kEnc_1111
                                                                      solve( State_1111111( ~prog_1.1,
                                                                                            ~prog_1111111, a,
                                                                                            b, kEnc, kSign
                                                                             ) ▶₀ #t2.5 )
                                                                        case Rep_1_111111
                                                                        solve( State_1111111111111( ~lock8.1,
                                                                                                    ~prog_1.1,
                                                                                                    ~prog_1111111.1,
                                                                                                    ~prog_111111111,
                                                                                                    a, b,
                                                                                                    kEnc,
                                                                                                    kSign, m,
                                                                                                    seq.1
                                                                               ) ▶₀ #t2.6 )
                                                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                          solve( State_11111211111( ~lock6.3,
                                                                                                    ~prog_1.1,
                                                                                                    ~prog_1111121.3,
                                                                                                    ~prog_111112111.2,
                                                                                                    MH.2,
                                                                                                    SH.2, a,
                                                                                                    b, kEnc,
                                                                                                    kSign, m,
                                                                                                    pad.2,
                                                                                                    seq.1
                                                                                 ) ▶₀ #t2.7 )
                                                                            case event_Recva_b_m_1111121111
                                                                            by contradiction /* cyclic */
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_2
                                                              solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                                                case MessageID_rule_
                                                                solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                       ) ▶₀ #t2.5 )
                                                                  case new_kEnc_1111
                                                                  solve( State_11111( ~prog_1, a, b, kEnc,
                                                                                      kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case new_kEnc_1111
                                                                    solve( State_1111111( ~prog_1.1,
                                                                                          ~prog_1111111, a, b,
                                                                                          kEnc, kSign
                                                                           ) ▶₀ #t2.5 )
                                                                      case Rep_1_111111
                                                                      solve( State_1111111111111( ~lock8.1,
                                                                                                  ~prog_1.1,
                                                                                                  ~prog_1111111.1,
                                                                                                  ~prog_111111111,
                                                                                                  a, b, kEnc,
                                                                                                  kSign, m,
                                                                                                  seq.1
                                                                             ) ▶₀ #t2.6 )
                                                                        case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                        solve( State_11111211111( ~lock6.3,
                                                                                                  ~prog_1.1,
                                                                                                  ~prog_1111121.3,
                                                                                                  ~prog_111112111.2,
                                                                                                  MH.2, SH.2,
                                                                                                  a, b, kEnc,
                                                                                                  kSign, m,
                                                                                                  pad.2, seq.1
                                                                               ) ▶₀ #t2.7 )
                                                                          case event_Recva_b_m_1111121111
                                                                          by contradiction /* cyclic */
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            next
                                                              case case_3
                                                              solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                     ) ▶₀ #t2.5 )
                                                                case new_kEnc_1111
                                                                solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                                       ) ▶₀ #t2.5 )
                                                                  case new_kEnc_1111
                                                                  solve( State_1111111( ~prog_1.1,
                                                                                        ~prog_1111111, a, b,
                                                                                        kEnc, kSign
                                                                         ) ▶₀ #t2.5 )
                                                                    case Rep_1_111111
                                                                    solve( State_1111111111111( ~lock8.1,
                                                                                                ~prog_1.1,
                                                                                                ~prog_1111111.1,
                                                                                                ~prog_111111111,
                                                                                                a, b, kEnc,
                                                                                                kSign, m,
                                                                                                seq.1
                                                                           ) ▶₀ #t2.6 )
                                                                      case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                      solve( State_11111211111( ~lock6.2,
                                                                                                ~prog_1.1,
                                                                                                ~prog_1111121.2,
                                                                                                ~prog_111112111,
                                                                                                MH.2, SH.2, a,
                                                                                                b, kEnc,
                                                                                                kSign, m,
                                                                                                pad.2, seq.1
                                                                             ) ▶₀ #t2.7 )
                                                                        case event_Recva_b_m_1111121111
                                                                        solve( State_11111( ~prog_1, a.1, b.1,
                                                                                            kEnc, kSign
                                                                               ) ▶₀ #t2.7 )
                                                                          case new_kEnc_1111
                                                                          solve( State_11111( ~prog_1, a.1,
                                                                                              b.1, kEnc, kSign
                                                                                 ) ▶₀ #t2.7 )
                                                                            case new_kEnc_1111
                                                                            solve( State_1111121( ~prog_1.2,
                                                                                                  ~prog_1111121,
                                                                                                  a.1, b.1,
                                                                                                  kEnc, kSign
                                                                                   ) ▶₀ #t2.7 )
                                                                              case Rep_1_111112
                                                                              solve( State_11111( ~prog_1,
                                                                                                  a.1, b.1,
                                                                                                  kEnc, kSign
                                                                                     ) ▶₀ #t2.7 )
                                                                                case new_kEnc_1111
                                                                                solve( State_11111( ~prog_1,
                                                                                                    a.1, b.1,
                                                                                                    kEnc,
                                                                                                    kSign
                                                                                       ) ▶₀ #t2.7 )
                                                                                  case new_kEnc_1111
                                                                                  solve( State_11111211( ~lock6.2,
                                                                                                         ~prog_1.1,
                                                                                                         ~prog_1111121.2,
                                                                                                         a, b,
                                                                                                         ~n.2,
                                                                                                         ~n.3
                                                                                         ) ▶₁ #j.2 )
                                                                                    case lock_b_a__1111121
                                                                                    solve( ((#t2.1 < #vr.23) ∧
                                                                                            (∃ #t2.2.
                                                                                              (Unlock( ~lock6,
                                                                                                       <~n.1, 
                                                                                                        ~n>
                                                                                               ) @ #t2.2)
                                                                                             ∧
                                                                                              (#t2.1 < #t2.2) ∧
                                                                                              (#t2.2 < #vr.23) ∧
                                                                                              (∀ #t0.
                                                                                                (Unlock( ~lock6,
                                                                                                         <
                                                                                                          ~n.1, 
                                                                                                          ~n>
                                                                                                 ) @ #t0)
                                                                                               ⇒
                                                                                                #t0 = #t2.2) ∧
                                                                                              (∀ lp #t0.
                                                                                                (Lock( lp,
                                                                                                       <~n.1, 
                                                                                                        ~n>
                                                                                                 ) @ #t0)
                                                                                               ⇒
                                                                                                ((#t0 < #t2.1) ∨
                                                                                                 (#t0 =
                                                                                                  #t2.1) ∨
                                                                                                 (#t2.2 < #t0))) ∧
                                                                                              (∀ lp #t0.
                                                                                                (Unlock( lp,
                                                                                                         <
                                                                                                          ~n.1, 
                                                                                                          ~n>
                                                                                                 ) @ #t0)
                                                                                               ⇒
                                                                                                ((#t0 < #t2.1) ∨
                                                                                                 (#t2.2 < #t0) ∨
                                                                                                 (#t2.2 =
                                                                                                  #t0)))))  ∥
                                                                                           (#vr.23 < #t2.1)  ∥
                                                                                           (#t2.1 = #vr.23) )
                                                                                      case case_1
                                                                                      solve( ((#t2.3 < #vr.23) ∧
                                                                                              (∃ #t2.4.
                                                                                                (Unlock( ~lock6.1,
                                                                                                         <
                                                                                                          ~n.1, 
                                                                                                          ~n>
                                                                                                 ) @ #t2.4)
                                                                                               ∧
                                                                                                (#t2.3 < #t2.4) ∧
                                                                                                (#t2.4 < #vr.23) ∧
                                                                                                (∀ #t0.
                                                                                                  (Unlock( ~lock6.1,
                                                                                                           <
                                                                                                            ~n.1, 
                                                                                                            ~n
                                                                                                           >
                                                                                                   ) @ #t0)
                                                                                                 ⇒
                                                                                                  #t0 =
                                                                                                  #t2.4) ∧
                                                                                                (∀ lp #t0.
                                                                                                  (Lock( lp,
                                                                                                         <
                                                                                                          ~n.1, 
                                                                                                          ~n>
                                                                                                   ) @ #t0)
                                                                                                 ⇒
                                                                                                  ((#t0 < #t2.3) ∨
                                                                                                   (#t0 =
                                                                                                    #t2.3) ∨
                                                                                                   (#t2.4 < #t0))) ∧
                                                                                                (∀ lp #t0.
                                                                                                  (Unlock( lp,
                                                                                                           <
                                                                                                            ~n.1, 
                                                                                                            ~n
                                                                                                           >
                                                                                                   ) @ #t0)
                                                                                                 ⇒
                                                                                                  ((#t0 < #t2.3) ∨
                                                                                                   (#t2.4 < #t0) ∨
                                                                                                   (#t2.4 =
                                                                                                    #t0)))))  ∥
                                                                                             (#vr.23 < #t2.3)  ∥
                                                                                             (#t2.3 =
                                                                                              #vr.23) )
                                                                                        case case_1
                                                                                        solve( MID_Receiver( ~x
                                                                                               ) ▶₃ #j.2 )
                                                                                          case MessageID_rule_
                                                                                          by contradiction
                                                                                             /* cyclic */
                                                                                        qed
                                                                                      next
                                                                                        case case_2
                                                                                        solve( MID_Receiver( ~x
                                                                                               ) ▶₃ #j.2 )
                                                                                          case MessageID_rule_
                                                                                          by contradiction
                                                                                             /* cyclic */
                                                                                        qed
                                                                                      qed
                                                                                    next
                                                                                      case case_2
                                                                                      solve( MID_Receiver( ~x
                                                                                             ) ▶₃ #j.2 )
                                                                                        case MessageID_rule_
                                                                                        by contradiction
                                                                                           /* cyclic */
                                                                                      qed
                                                                                    next
                                                                                      case case_3
                                                                                      solve( State_11111( ~prog_1,
                                                                                                          a,
                                                                                                          b,
                                                                                                          kEnc,
                                                                                                          kSign
                                                                                             ) ▶₀ #t2.7 )
                                                                                        case new_kEnc_1111
                                                                                        solve( State_11111( ~prog_1,
                                                                                                            a,
                                                                                                            b,
                                                                                                            kEnc,
                                                                                                            kSign
                                                                                               ) ▶₀ #t2.7 )
                                                                                          case new_kEnc_1111
                                                                                          solve( State_1111111( ~prog_1.1,
                                                                                                                ~prog_1111111,
                                                                                                                a,
                                                                                                                b,
                                                                                                                kEnc,
                                                                                                                kSign
                                                                                                 ) ▶₀ #t2.7 )
                                                                                            case Rep_1_111111
                                                                                            solve( State_11111211111( ~lock6.2,
                                                                                                                      ~prog_1.1,
                                                                                                                      ~prog_1111121.2,
                                                                                                                      ~prog_111112111,
                                                                                                                      MH.2,
                                                                                                                      SH.2,
                                                                                                                      a,
                                                                                                                      b,
                                                                                                                      kEnc,
                                                                                                                      kSign,
                                                                                                                      m,
                                                                                                                      pad.2,
                                                                                                                      seq.1
                                                                                                   ) ▶₀ #t2.7 )
                                                                                              case event_Recva_b_m_1111121111
                                                                                              solve( State_11111( ~prog_1,
                                                                                                                  a,
                                                                                                                  b,
                                                                                                                  kEnc,
                                                                                                                  kSign
                                                                                                     ) ▶₀ #t2.7 )
                                                                                                case new_kEnc_1111
                                                                                                solve( State_11111( ~prog_1,
                                                                                                                    a,
                                                                                                                    b,
                                                                                                                    kEnc,
                                                                                                                    kSign
                                                                                                       ) ▶₀ #t2.7 )
                                                                                                  case new_kEnc_1111
                                                                                                  solve( State_1111121( ~prog_1.1,
                                                                                                                        ~prog_1111121,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                         ) ▶₀ #t2.7 )
                                                                                                    case Rep_1_111112
                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                        a,
                                                                                                                        b,
                                                                                                                        kEnc,
                                                                                                                        kSign
                                                                                                           ) ▶₀ #t2.7 )
                                                                                                      case new_kEnc_1111
                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                          a,
                                                                                                                          b,
                                                                                                                          kEnc,
                                                                                                                          kSign
                                                                                                             ) ▶₀ #t2.7 )
                                                                                                        case new_kEnc_1111
                                                                                                        solve( State_11111( ~prog_1,
                                                                                                                            a,
                                                                                                                            b,
                                                                                                                            kEnc,
                                                                                                                            kSign
                                                                                                               ) ▶₀ #t2.7 )
                                                                                                          case new_kEnc_1111
                                                                                                          solve( State_11111( ~prog_1,
                                                                                                                              a,
                                                                                                                              b,
                                                                                                                              kEnc,
                                                                                                                              kSign
                                                                                                                 ) ▶₀ #t2.7 )
                                                                                                            case new_kEnc_1111
                                                                                                            solve( State_1111121( ~prog_1.1,
                                                                                                                                  ~prog_1111121,
                                                                                                                                  a,
                                                                                                                                  b,
                                                                                                                                  kEnc,
                                                                                                                                  kSign
                                                                                                                   ) ▶₀ #t2.7 )
                                                                                                              case Rep_1_111112
                                                                                                              solve( State_11111( ~prog_1,
                                                                                                                                  a,
                                                                                                                                  b,
                                                                                                                                  kEnc,
                                                                                                                                  kSign
                                                                                                                     ) ▶₀ #t2.7 )
                                                                                                                case new_kEnc_1111
                                                                                                                solve( State_11111( ~prog_1,
                                                                                                                                    a,
                                                                                                                                    b,
                                                                                                                                    kEnc,
                                                                                                                                    kSign
                                                                                                                       ) ▶₀ #t2.7 )
                                                                                                                  case new_kEnc_1111
                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                      a,
                                                                                                                                      b,
                                                                                                                                      kEnc,
                                                                                                                                      kSign
                                                                                                                         ) ▶₀ #t2.7 )
                                                                                                                    case new_kEnc_1111
                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                        a,
                                                                                                                                        b,
                                                                                                                                        kEnc,
                                                                                                                                        kSign
                                                                                                                           ) ▶₀ #t2.7 )
                                                                                                                      case new_kEnc_1111
                                                                                                                      solve( State_1111121( ~prog_1.1,
                                                                                                                                            ~prog_1111121,
                                                                                                                                            a,
                                                                                                                                            b,
                                                                                                                                            kEnc,
                                                                                                                                            kSign
                                                                                                                             ) ▶₀ #t2.7 )
                                                                                                                        case Rep_1_111112
                                                                                                                        solve( State_11111( ~prog_1,
                                                                                                                                            a,
                                                                                                                                            b,
                                                                                                                                            kEnc,
                                                                                                                                            kSign
                                                                                                                               ) ▶₀ #t2.7 )
                                                                                                                          case new_kEnc_1111
                                                                                                                          solve( State_11111( ~prog_1,
                                                                                                                                              a,
                                                                                                                                              b,
                                                                                                                                              kEnc,
                                                                                                                                              kSign
                                                                                                                                 ) ▶₀ #t2.7 )
                                                                                                                            case new_kEnc_1111
                                                                                                                            solve( State_11111( ~prog_1,
                                                                                                                                                a,
                                                                                                                                                b,
                                                                                                                                                kEnc,
                                                                                                                                                kSign
                                                                                                                                   ) ▶₀ #t2.7 )
                                                                                                                              case new_kEnc_1111
                                                                                                                              solve( State_11111( ~prog_1,
                                                                                                                                                  a,
                                                                                                                                                  b,
                                                                                                                                                  kEnc,
                                                                                                                                                  kSign
                                                                                                                                     ) ▶₀ #t2.7 )
                                                                                                                                case new_kEnc_1111
                                                                                                                                solve( State_11111( ~prog_1,
                                                                                                                                                    a,
                                                                                                                                                    b,
                                                                                                                                                    kEnc,
                                                                                                                                                    kSign
                                                                                                                                       ) ▶₀ #t2.7 )
                                                                                                                                  case new_kEnc_1111
                                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                                      a,
                                                                                                                                                      b,
                                                                                                                                                      kEnc,
                                                                                                                                                      kSign
                                                                                                                                         ) ▶₀ #t2.7 )
                                                                                                                                    case new_kEnc_1111
                                                                                                                                    solve( !KU( senc(<
                                                                                                                                                      (
                                                                                                                                                       dif+
                                                                                                                                                       seq
                                                                                                                                                      ), 
                                                                                                                                                      m2, 
                                                                                                                                                      pad.1, 
                                                                                                                                                      mac(<
                                                                                                                                                           MH.1, 
                                                                                                                                                           SH.1, 
                                                                                                                                                           (
                                                                                                                                                            dif+
                                                                                                                                                            seq
                                                                                                                                                           ), 
                                                                                                                                                           m2, 
                                                                                                                                                           pad.1
                                                                                                                                                          >,
                                                                                                                                                          ~n.3)
                                                                                                                                                     >,
                                                                                                                                                     ~n.2)
                                                                                                                                           ) @ #vk.9 )
                                                                                                                                      case c_senc
                                                                                                                                      by solve( !KU( ~n.2
                                                                                                                                                ) @ #vk.15 )
                                                                                                                                    next
                                                                                                                                      case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                      solve( (¬(#vr.19 < #vr.29))  ∥
                                                                                                                                             (∃ dif.1.
                                                                                                                                               ((
                                                                                                                                                 dif+
                                                                                                                                                 seq
                                                                                                                                                ) =
                                                                                                                                                (
                                                                                                                                                 seq+
                                                                                                                                                 dif.1
                                                                                                                                                ))) )
                                                                                                                                        case case_2
                                                                                                                                        solve( (¬(#vr.29 < #vr.19))  ∥
                                                                                                                                               (∃ dif.1.
                                                                                                                                                 (seq =
                                                                                                                                                  (
                                                                                                                                                   dif+
                                                                                                                                                   seq+
                                                                                                                                                   dif.1
                                                                                                                                                  ))) )
                                                                                                                                          case case_1
                                                                                                                                          solve( ((#t2.5 < #vr.31) ∧
                                                                                                                                                  (∃ #t2.6.
                                                                                                                                                    (Unlock( ~lock8,
                                                                                                                                                             <
                                                                                                                                                              ~n, 
                                                                                                                                                              ~n.1
                                                                                                                                                             >
                                                                                                                                                     ) @ #t2.6)
                                                                                                                                                   ∧
                                                                                                                                                    (#t2.5 < #t2.6) ∧
                                                                                                                                                    (#t2.6 < #vr.31) ∧
                                                                                                                                                    (∀ #t0.
                                                                                                                                                      (Unlock( ~lock8,
                                                                                                                                                               <
                                                                                                                                                                ~n, 
                                                                                                                                                                ~n.1
                                                                                                                                                               >
                                                                                                                                                       ) @ #t0)
                                                                                                                                                     ⇒
                                                                                                                                                      #t0 =
                                                                                                                                                      #t2.6) ∧
                                                                                                                                                    (∀ lp
                                                                                                                                                       #t0.
                                                                                                                                                      (Lock( lp,
                                                                                                                                                             <
                                                                                                                                                              ~n, 
                                                                                                                                                              ~n.1
                                                                                                                                                             >
                                                                                                                                                       ) @ #t0)
                                                                                                                                                     ⇒
                                                                                                                                                      ((#t0 < #t2.5) ∨
                                                                                                                                                       (#t0 =
                                                                                                                                                        #t2.5) ∨
                                                                                                                                                       (#t2.6 < #t0))) ∧
                                                                                                                                                    (∀ lp
                                                                                                                                                       #t0.
                                                                                                                                                      (Unlock( lp,
                                                                                                                                                               <
                                                                                                                                                                ~n, 
                                                                                                                                                                ~n.1
                                                                                                                                                               >
                                                                                                                                                       ) @ #t0)
                                                                                                                                                     ⇒
                                                                                                                                                      ((#t0 < #t2.5) ∨
                                                                                                                                                       (#t2.6 < #t0) ∨
                                                                                                                                                       (#t2.6 =
                                                                                                                                                        #t0)))))  ∥
                                                                                                                                                 (#vr.31 < #t2.5)  ∥
                                                                                                                                                 (#t2.5 =
                                                                                                                                                  #vr.31) )
                                                                                                                                            case case_1
                                                                                                                                            by contradiction
                                                                                                                                               /*
                                                                                                                                               cyclic
                                                                                                                                               */
                                                                                                                                          next
                                                                                                                                            case case_2
                                                                                                                                            solve( State_11111211( ~lock6.2,
                                                                                                                                                                   ~prog_1.1,
                                                                                                                                                                   ~prog_1111121.2,
                                                                                                                                                                   a,
                                                                                                                                                                   b,
                                                                                                                                                                   ~n.2,
                                                                                                                                                                   ~n.3
                                                                                                                                                   ) ▶₁ #j.2 )
                                                                                                                                              case lock_b_a__1111121
                                                                                                                                              solve( ((#t2.1 < #vr.33) ∧
                                                                                                                                                      (∃ #t2.2.
                                                                                                                                                        (Unlock( ~lock6,
                                                                                                                                                                 <
                                                                                                                                                                  ~n.1, 
                                                                                                                                                                  ~n
                                                                                                                                                                 >
                                                                                                                                                         ) @ #t2.2)
                                                                                                                                                       ∧
                                                                                                                                                        (#t2.1 < #t2.2) ∧
                                                                                                                                                        (#t2.2 < #vr.33) ∧
                                                                                                                                                        (∀ #t0.
                                                                                                                                                          (Unlock( ~lock6,
                                                                                                                                                                   <
                                                                                                                                                                    ~n.1, 
                                                                                                                                                                    ~n
                                                                                                                                                                   >
                                                                                                                                                           ) @ #t0)
                                                                                                                                                         ⇒
                                                                                                                                                          #t0 =
                                                                                                                                                          #t2.2) ∧
                                                                                                                                                        (∀ lp
                                                                                                                                                           #t0.
                                                                                                                                                          (Lock( lp,
                                                                                                                                                                 <
                                                                                                                                                                  ~n.1, 
                                                                                                                                                                  ~n
                                                                                                                                                                 >
                                                                                                                                                           ) @ #t0)
                                                                                                                                                         ⇒
                                                                                                                                                          ((#t0 < #t2.1) ∨
                                                                                                                                                           (#t0 =
                                                                                                                                                            #t2.1) ∨
                                                                                                                                                           (#t2.2 < #t0))) ∧
                                                                                                                                                        (∀ lp
                                                                                                                                                           #t0.
                                                                                                                                                          (Unlock( lp,
                                                                                                                                                                   <
                                                                                                                                                                    ~n.1, 
                                                                                                                                                                    ~n
                                                                                                                                                                   >
                                                                                                                                                           ) @ #t0)
                                                                                                                                                         ⇒
                                                                                                                                                          ((#t0 < #t2.1) ∨
                                                                                                                                                           (#t2.2 < #t0) ∨
                                                                                                                                                           (#t2.2 =
                                                                                                                                                            #t0)))))  ∥
                                                                                                                                                     (#vr.33 < #t2.1)  ∥
                                                                                                                                                     (#t2.1 =
                                                                                                                                                      #vr.33) )
                                                                                                                                                case case_1
                                                                                                                                                solve( ((#t2.3 < #vr.33) ∧
                                                                                                                                                        (∃ #t2.4.
                                                                                                                                                          (Unlock( ~lock6.1,
                                                                                                                                                                   <
                                                                                                                                                                    ~n.1, 
                                                                                                                                                                    ~n
                                                                                                                                                                   >
                                                                                                                                                           ) @ #t2.4)
                                                                                                                                                         ∧
                                                                                                                                                          (#t2.3 < #t2.4) ∧
                                                                                                                                                          (#t2.4 < #vr.33) ∧
                                                                                                                                                          (∀ #t0.
                                                                                                                                                            (Unlock( ~lock6.1,
                                                                                                                                                                     <
                                                                                                                                                                      ~n.1, 
                                                                                                                                                                      ~n
                                                                                                                                                                     >
                                                                                                                                                             ) @ #t0)
                                                                                                                                                           ⇒
                                                                                                                                                            #t0 =
                                                                                                                                                            #t2.4) ∧
                                                                                                                                                          (∀ lp
                                                                                                                                                             #t0.
                                                                                                                                                            (Lock( lp,
                                                                                                                                                                   <
                                                                                                                                                                    ~n.1, 
                                                                                                                                                                    ~n
                                                                                                                                                                   >
                                                                                                                                                             ) @ #t0)
                                                                                                                                                           ⇒
                                                                                                                                                            ((#t0 < #t2.3) ∨
                                                                                                                                                             (#t0 =
                                                                                                                                                              #t2.3) ∨
                                                                                                                                                             (#t2.4 < #t0))) ∧
                                                                                                                                                          (∀ lp
                                                                                                                                                             #t0.
                                                                                                                                                            (Unlock( lp,
                                                                                                                                                                     <
                                                                                                                                                                      ~n.1, 
                                                                                                                                                                      ~n
                                                                                                                                                                     >
                                                                                                                                                             ) @ #t0)
                                                                                                                                                           ⇒
                                                                                                                                                            ((#t0 < #t2.3) ∨
                                                                                                                                                             (#t2.4 < #t0) ∨
                                                                                                                                                             (#t2.4 =
                                                                                                                                                              #t0)))))  ∥
                                                                                                                                                       (#vr.33 < #t2.3)  ∥
                                                                                                                                                       (#t2.3 =
                                                                                                                                                        #vr.33) )
                                                                                                                                                  case case_1
                                                                                                                                                  solve( MID_Receiver( ~x.1
                                                                                                                                                         ) ▶₃ #j.2 )
                                                                                                                                                    case MessageID_rule_
                                                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                                                        a,
                                                                                                                                                                        b,
                                                                                                                                                                        kEnc,
                                                                                                                                                                        kSign
                                                                                                                                                           ) ▶₀ #t2.7 )
                                                                                                                                                      case new_kEnc_1111
                                                                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                                                                          a,
                                                                                                                                                                          b,
                                                                                                                                                                          kEnc,
                                                                                                                                                                          kSign
                                                                                                                                                             ) ▶₀ #t2.7 )
                                                                                                                                                        case new_kEnc_1111
                                                                                                                                                        solve( State_1111111( ~prog_1.1,
                                                                                                                                                                              ~prog_1111111.1,
                                                                                                                                                                              a,
                                                                                                                                                                              b,
                                                                                                                                                                              kEnc,
                                                                                                                                                                              kSign
                                                                                                                                                               ) ▶₀ #t2.7 )
                                                                                                                                                          case Rep_1_111111
                                                                                                                                                          solve( State_1111111111111( ~lock8.2,
                                                                                                                                                                                      ~prog_1.1,
                                                                                                                                                                                      ~prog_1111111.2,
                                                                                                                                                                                      ~prog_111111111.1,
                                                                                                                                                                                      a,
                                                                                                                                                                                      b,
                                                                                                                                                                                      kEnc,
                                                                                                                                                                                      kSign,
                                                                                                                                                                                      m,
                                                                                                                                                                                      seq.1
                                                                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                                                                            case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                                            by contradiction
                                                                                                                                                               /*
                                                                                                                                                               cyclic
                                                                                                                                                               */
                                                                                                                                                          qed
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    qed
                                                                                                                                                  qed
                                                                                                                                                next
                                                                                                                                                  case case_2
                                                                                                                                                  solve( MID_Receiver( ~x.1
                                                                                                                                                         ) ▶₃ #j.2 )
                                                                                                                                                    case MessageID_rule_
                                                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                                                        a,
                                                                                                                                                                        b,
                                                                                                                                                                        kEnc,
                                                                                                                                                                        kSign
                                                                                                                                                           ) ▶₀ #t2.7 )
                                                                                                                                                      case new_kEnc_1111
                                                                                                                                                      solve( State_11111( ~prog_1,
                                                                                                                                                                          a,
                                                                                                                                                                          b,
                                                                                                                                                                          kEnc,
                                                                                                                                                                          kSign
                                                                                                                                                             ) ▶₀ #t2.7 )
                                                                                                                                                        case new_kEnc_1111
                                                                                                                                                        solve( State_1111111( ~prog_1.1,
                                                                                                                                                                              ~prog_1111111.1,
                                                                                                                                                                              a,
                                                                                                                                                                              b,
                                                                                                                                                                              kEnc,
                                                                                                                                                                              kSign
                                                                                                                                                               ) ▶₀ #t2.7 )
                                                                                                                                                          case Rep_1_111111
                                                                                                                                                          solve( State_1111111111111( ~lock8.2,
                                                                                                                                                                                      ~prog_1.1,
                                                                                                                                                                                      ~prog_1111111.2,
                                                                                                                                                                                      ~prog_111111111.1,
                                                                                                                                                                                      a,
                                                                                                                                                                                      b,
                                                                                                                                                                                      kEnc,
                                                                                                                                                                                      kSign,
                                                                                                                                                                                      m,
                                                                                                                                                                                      seq.1
                                                                                                                                                                 ) ▶₀ #t2.8 )
                                                                                                                                                            case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                                            by contradiction
                                                                                                                                                               /*
                                                                                                                                                               cyclic
                                                                                                                                                               */
                                                                                                                                                          qed
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    qed
                                                                                                                                                  qed
                                                                                                                                                next
                                                                                                                                                  case case_3
                                                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                                                      a,
                                                                                                                                                                      b,
                                                                                                                                                                      kEnc,
                                                                                                                                                                      kSign
                                                                                                                                                         ) ▶₀ #t2.7 )
                                                                                                                                                    case new_kEnc_1111
                                                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                                                        a,
                                                                                                                                                                        b,
                                                                                                                                                                        kEnc,
                                                                                                                                                                        kSign
                                                                                                                                                           ) ▶₀ #t2.7 )
                                                                                                                                                      case new_kEnc_1111
                                                                                                                                                      solve( State_1111111( ~prog_1.1,
                                                                                                                                                                            ~prog_1111111.1,
                                                                                                                                                                            a,
                                                                                                                                                                            b,
                                                                                                                                                                            kEnc,
                                                                                                                                                                            kSign
                                                                                                                                                             ) ▶₀ #t2.7 )
                                                                                                                                                        case Rep_1_111111
                                                                                                                                                        solve( State_1111111111111( ~lock8.2,
                                                                                                                                                                                    ~prog_1.1,
                                                                                                                                                                                    ~prog_1111111.2,
                                                                                                                                                                                    ~prog_111111111.1,
                                                                                                                                                                                    a,
                                                                                                                                                                                    b,
                                                                                                                                                                                    kEnc,
                                                                                                                                                                                    kSign,
                                                                                                                                                                                    m,
                                                                                                                                                                                    seq.1
                                                                                                                                                               ) ▶₀ #t2.8 )
                                                                                                                                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                                          by contradiction
                                                                                                                                                             /*
                                                                                                                                                             cyclic
                                                                                                                                                             */
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    qed
                                                                                                                                                  qed
                                                                                                                                                qed
                                                                                                                                              next
                                                                                                                                                case case_2
                                                                                                                                                solve( MID_Receiver( ~x.1
                                                                                                                                                       ) ▶₃ #j.2 )
                                                                                                                                                  case MessageID_rule_
                                                                                                                                                  solve( State_11111( ~prog_1,
                                                                                                                                                                      a,
                                                                                                                                                                      b,
                                                                                                                                                                      kEnc,
                                                                                                                                                                      kSign
                                                                                                                                                         ) ▶₀ #t2.7 )
                                                                                                                                                    case new_kEnc_1111
                                                                                                                                                    solve( State_11111( ~prog_1,
                                                                                                                                                                        a,
                                                                                                                                                                        b,
                                                                                                                                                                        kEnc,
                                                                                                                                                                        kSign
                                                                                                                                                           ) ▶₀ #t2.7 )
                                                                                                                                                      case new_kEnc_1111
                                                                                                                                                      solve( State_1111111( ~prog_1.1,
                                                                                                                                                                            ~prog_1111111.1,
                                                                                                                                                                            a,
                                                                                                                                                                            b,
                                                                                                                                                                            kEnc,
                                                                                                                                                                            kSign
                                                                                                                                                             ) ▶₀ #t2.7 )
                                                                                                                                                        case Rep_1_111111
                                                                                                                                                        solve( State_1111111111111( ~lock8.2,
                                                                                                                                                                                    ~prog_1.1,
                                                                                                                                                                                    ~prog_1111111.2,
                                                                                                                                                                                    ~prog_111111111.1,
                                                                                                                                                                                    a,
                                                                                                                                                                                    b,
                                                                                                                                                                                    kEnc,
                                                                                                                                                                                    kSign,
                                                                                                                                                                                    m,
                                                                                                                                                                                    seq.1
                                                                                                                                                               ) ▶₀ #t2.8 )
                                                                                                                                                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                                                                                                                                                          by contradiction
                                                                                                                                                             /*
                                                                                                                                                             cyclic
                                                                                                                                                             */
                                                                                                                                                        qed
                                                                                                                                                      qed
                                                                                                                                                    qed
                                                                                                                                                  qed
                                                                                                                                                qed
                                                                                                                                              qed
                                                                                                                                            qed
                                                                                                                                          qed
                                                                                                                                        qed
                                                                                                                                      qed
                                                                                                                                    qed
                                                                                                                                  qed
                                                                                                                                qed
                                                                                                                              qed
                                                                                                                            qed
                                                                                                                          qed
                                                                                                                        qed
                                                                                                                      qed
                                                                                                                    qed
                                                                                                                  qed
                                                                                                                qed
                                                                                                              qed
                                                                                                            qed
                                                                                                          qed
                                                                                                        qed
                                                                                                      qed
                                                                                                    qed
                                                                                                  qed
                                                                                                qed
                                                                                              qed
                                                                                            qed
                                                                                          qed
                                                                                        qed
                                                                                      qed
                                                                                    qed
                                                                                  qed
                                                                                qed
                                                                              qed
                                                                            qed
                                                                          qed
                                                                        qed
                                                                      qed
                                                                    qed
                                                                  qed
                                                                qed
                                                              qed
                                                            qed
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111121( ~prog_1.1, ~prog_1111121, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111112
                solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                          ~prog_111112111, MH.2, SH.2, a, b, kEnc, kSign, m.1, pad.2, seq.1
                       ) ▶₀ #t2.2 )
                  case event_Recva_b_m_1111121111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111121( ~prog_1.1, ~prog_1111121.1, a, b, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111112
                        solve( State_11111211111( ~lock6.2, ~prog_1.1, ~prog_1111121.2,
                                                  ~prog_111112111.1, MH.2, SH.2, a, b, kEnc, kSign, m.1,
                                                  pad.2, seq.1
                               ) ▶₀ #t2.4 )
                          case event_Recva_b_m_1111121111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma delivery:
  all-traces
  "∀ A B m #i.
    (Sent( A, B, m ) @ #i) ⇒ (∃ #k. (Recv( A, B, m ) @ #k) ∧ (#i < #k))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m #i.
  (Sent( A, B, m ) @ #i) ∧ ∀ #k. (Recv( A, B, m ) @ #k) ⇒ ¬(#i < #k)"
*/
simplify
solve( State_11111111111( ~lock8, ~prog_1, ~prog_1111111,
                          ~prog_111111111, A, B, kEnc, kSign, m, seq
       ) ▶₀ #i )
  case new_m_1111111111
  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
    case new_kEnc_1111
    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
      case new_kEnc_1111
      solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
             ) ▶₀ #t2.1 )
        case Rep_1_111111
        solve( State_1111111111111( ~lock8.1, ~prog_1.1, ~prog_1111111.1,
                                    ~prog_111111111, a, b, kEnc, kSign, m, seq.1
               ) ▶₀ #t2.2 )
          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.3 )
              case new_kEnc_1111
              solve( State_11111211( ~lock6, ~prog_1.1, ~prog_1111121, a, b, ~n.2, ~n.3
                     ) ▶₁ #j )
                case lock_b_a__1111121
                solve( MID_Receiver( ~x ) ▶₃ #j )
                  case MessageID_rule_
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111111
                        solve( State_11111211111( ~lock6.1, ~prog_1.1, ~prog_1111121.1,
                                                  ~prog_111112111, MH.1, SH.1, a, b, kEnc, kSign, m, pad.1,
                                                  seq.1
                               ) ▶₀ #t2.3 )
                          case event_Recva_b_m_1111121111
                          by contradiction /* from formulas */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

lemma delivery_order:
  all-traces
  "∀ A B m m2 #i #j.
    (((Sent( A, B, m ) @ #i) ∧ (Sent( A, B, m2 ) @ #j)) ∧ (#i < #j)) ⇒
    (∃ #k #l.
      ((Recv( A, B, m ) @ #k) ∧ (Recv( A, B, m2 ) @ #l)) ∧ (#k < #l))"
/*
guarded formula characterizing all counter-examples:
"∃ A B m m2 #i #j.
  (Sent( A, B, m ) @ #i) ∧ (Sent( A, B, m2 ) @ #j)
 ∧
  (#i < #j) ∧
  (∀ #k #l. (Recv( A, B, m ) @ #k) ∧ (Recv( A, B, m2 ) @ #l) ⇒ ¬(#k < #l))"
*/
simplify
solve( State_11111111111( ~lock8, ~prog_1, ~prog_1111111,
                          ~prog_111111111, A, B, kEnc, kSign, m, seq
       ) ▶₀ #i )
  case new_m_1111111111
  solve( State_11111111111( ~lock8.1, ~prog_1.1, ~prog_1111111.1,
                            ~prog_111111111.1, ~n, ~n.1, kEnc, kSign, m2, seq.1
         ) ▶₀ #j )
    case new_m_1111111111
    solve( (¬(#vr.1 < #vr.14))  ∥ (∃ dif. (seq.1 = (dif+seq))) )
      case case_1
      solve( (¬(#vr.14 < #vr.1))  ∥ (∃ dif. (seq = (dif+seq.1))) )
        case case_1
        solve( ((#vr.3 < #vr.16) ∧
                (∃ #t2.
                  (Unlock( ~lock8, <~n, ~n.1> ) @ #t2)
                 ∧
                  (#vr.3 < #t2) ∧
                  (#t2 < #vr.16) ∧
                  (∀ #t0. (Unlock( ~lock8, <~n, ~n.1> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.16 < #vr.3)  ∥ (#vr.3 = #vr.16) )
          case case_1
          solve( (#vr.1 = #vr.14)  ∥ (#vr.14 < #vr.1) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_2
          solve( (#vr.1 = #vr.14)  ∥ (#vr.14 < #vr.1) )
            case case_1
            by contradiction /* cyclic */
          next
            case case_2
            by contradiction /* from formulas */
          qed
        next
          case case_3
          by contradiction /* cyclic */
        qed
      next
        case case_2
        solve( ((#vr.3 < #vr.16) ∧
                (∃ #t2.
                  (Unlock( ~lock8, <~n, ~n.1> ) @ #t2)
                 ∧
                  (#vr.3 < #t2) ∧
                  (#t2 < #vr.16) ∧
                  (∀ #t0. (Unlock( ~lock8, <~n, ~n.1> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.16 < #vr.3)  ∥ (#vr.3 = #vr.16) )
          case case_1
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111111
                solve( State_1111111111111( ~lock8.2, ~prog_1.1, ~prog_1111111.2,
                                            ~prog_111111111, a, b, kEnc, kSign, m, seq.1
                       ) ▶₀ #t2.2 )
                  case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                  by contradiction /* cyclic */
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111111
                solve( State_1111111111111( ~lock8.2, ~prog_1.1, ~prog_1111111.2,
                                            ~prog_111111111, a, b, kEnc, kSign, m, seq.1
                       ) ▶₀ #t2.2 )
                  case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111111( ~prog_1.2, ~prog_1111111.1, a.1, b.1, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111111
                        solve( State_1111111111111( ~lock8.2, ~prog_1.2, ~prog_1111111.2,
                                                    ~prog_111111111.1, a.1, b.1, kEnc, kSign, m, seq.1
                               ) ▶₀ #t2.4 )
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    next
      case case_2
      solve( (¬(#vr.14 < #vr.1))  ∥ (∃ dif.1. (seq = (dif+seq+dif.1))) )
        case case_1
        solve( ((#vr.3 < #vr.16) ∧
                (∃ #t2.
                  (Unlock( ~lock8, <~n, ~n.1> ) @ #t2)
                 ∧
                  (#vr.3 < #t2) ∧
                  (#t2 < #vr.16) ∧
                  (∀ #t0. (Unlock( ~lock8, <~n, ~n.1> ) @ #t0) ⇒ #t0 = #t2) ∧
                  (∀ lp #t0.
                    (Lock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t0 = #vr.3) ∨ (#t2 < #t0))) ∧
                  (∀ lp #t0.
                    (Unlock( lp, <~n, ~n.1> ) @ #t0)
                   ⇒
                    ((#t0 < #vr.3) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
               (#vr.16 < #vr.3)  ∥ (#vr.3 = #vr.16) )
          case case_1
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111111
                solve( State_1111111111111( ~lock8.2, ~prog_1.1, ~prog_1111111.2,
                                            ~prog_111111111, a, b, kEnc, kSign, m, seq.1
                       ) ▶₀ #t2.2 )
                  case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111111( ~prog_1.2, ~prog_1111111.1, a.1, b.1, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111111
                        solve( State_1111111111111( ~lock8.2, ~prog_1.2, ~prog_1111111.2,
                                                    ~prog_111111111.1, a.1, b.1, kEnc, kSign, m, seq.1
                               ) ▶₀ #t2.4 )
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                            case new_kEnc_1111
                            solve( State_11111( ~prog_1, a.2, b.2, kEnc, kSign ) ▶₀ #t2.5 )
                              case new_kEnc_1111
                              solve( State_11111211( ~lock6, ~prog_1.1, ~prog_1111121, a, b, ~n.2, ~n.3
                                     ) ▶₁ #j.1 )
                                case lock_b_a__1111121
                                solve( MID_Receiver( ~x ) ▶₃ #j.1 )
                                  case MessageID_rule_
                                  solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                    case new_kEnc_1111
                                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.5 )
                                      case new_kEnc_1111
                                      solve( State_1111111( ~prog_1.2, ~prog_1111111, a.1, b.1, kEnc, kSign
                                             ) ▶₀ #t2.5 )
                                        case Rep_1_111111
                                        solve( State_11111211111( ~lock6.2, ~prog_1.2, ~prog_1111121.2,
                                                                  ~prog_111112111, MH.2, SH.2, a.1, b.1, kEnc,
                                                                  kSign, m, pad.2, seq.1
                                               ) ▶₀ #t2.5 )
                                          case event_Recva_b_m_1111121111
                                          solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.6 )
                                            case new_kEnc_1111
                                            solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.6 )
                                              case new_kEnc_1111
                                              solve( State_11111211( ~lock6.1, ~prog_1.1, ~prog_1111121.1, a,
                                                                     b, ~n.2, ~n.3
                                                     ) ▶₁ #j.2 )
                                                case lock_b_a__1111121
                                                solve( ((#vr.19 < #vr.24) ∧
                                                        (∃ #t2.
                                                          (Unlock( ~lock6, <~n.1, ~n> ) @ #t2)
                                                         ∧
                                                          (#vr.19 < #t2) ∧
                                                          (#t2 < #vr.24) ∧
                                                          (∀ #t0.
                                                            (Unlock( ~lock6, <~n.1, ~n> ) @ #t0)
                                                           ⇒
                                                            #t0 = #t2) ∧
                                                          (∀ lp #t0.
                                                            (Lock( lp, <~n.1, ~n> ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.19) ∨ (#t0 = #vr.19) ∨ (#t2 < #t0))) ∧
                                                          (∀ lp #t0.
                                                            (Unlock( lp, <~n.1, ~n> ) @ #t0)
                                                           ⇒
                                                            ((#t0 < #vr.19) ∨ (#t2 < #t0) ∨ (#t2 = #t0)))))  ∥
                                                       (#vr.24 < #vr.19)  ∥ (#vr.19 = #vr.24) )
                                                  case case_1
                                                  solve( MID_Receiver( ~x.1 ) ▶₃ #j.2 )
                                                    case MessageID_rule_
                                                    solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                           ) ▶₀ #t2.6 )
                                                      case new_kEnc_1111
                                                      solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                             ) ▶₀ #t2.6 )
                                                        case new_kEnc_1111
                                                        solve( State_1111111( ~prog_1.1, ~prog_1111111.1, a,
                                                                              b, kEnc, kSign
                                                               ) ▶₀ #t2.6 )
                                                          case Rep_1_111111
                                                          solve( State_11111211111( ~lock6.2, ~prog_1.1,
                                                                                    ~prog_1111121.2,
                                                                                    ~prog_111112111.1, MH.2,
                                                                                    SH.2, a, b, kEnc, kSign,
                                                                                    m, pad.2, seq.1
                                                                 ) ▶₀ #t2.6 )
                                                            case event_Recva_b_m_1111121111
                                                            by contradiction /* from formulas */
                                                          qed
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                next
                                                  case case_2
                                                  solve( MID_Receiver( ~x.1 ) ▶₃ #j.2 )
                                                    case MessageID_rule_
                                                    solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                           ) ▶₀ #t2.6 )
                                                      case new_kEnc_1111
                                                      solve( State_11111( ~prog_1, a, b, kEnc, kSign
                                                             ) ▶₀ #t2.6 )
                                                        case new_kEnc_1111
                                                        solve( State_1111111( ~prog_1.1, ~prog_1111111.1, a,
                                                                              b, kEnc, kSign
                                                               ) ▶₀ #t2.6 )
                                                          case Rep_1_111111
                                                          by solve( State_11111211111( ~lock6.2, ~prog_1.1,
                                                                                       ~prog_1111121.2,
                                                                                       ~prog_111112111.1,
                                                                                       MH.2, SH.2, a, b, kEnc,
                                                                                       kSign, m, pad.2, seq.1
                                                                    ) ▶₀ #t2.6 )
                                                        qed
                                                      qed
                                                    qed
                                                  qed
                                                qed
                                              qed
                                            qed
                                          qed
                                        qed
                                      qed
                                    qed
                                  qed
                                qed
                              qed
                            qed
                          qed
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        next
          case case_2
          solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2 )
            case new_kEnc_1111
            solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.1 )
              case new_kEnc_1111
              solve( State_1111111( ~prog_1.1, ~prog_1111111, a, b, kEnc, kSign
                     ) ▶₀ #t2.1 )
                case Rep_1_111111
                solve( State_1111111111111( ~lock8.2, ~prog_1.1, ~prog_1111111.2,
                                            ~prog_111111111, a, b, kEnc, kSign, m, seq.1
                       ) ▶₀ #t2.2 )
                  case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                  solve( State_11111( ~prog_1, a, b, kEnc, kSign ) ▶₀ #t2.3 )
                    case new_kEnc_1111
                    solve( State_11111( ~prog_1, a.1, b.1, kEnc, kSign ) ▶₀ #t2.3 )
                      case new_kEnc_1111
                      solve( State_1111111( ~prog_1.2, ~prog_1111111.1, a.1, b.1, kEnc, kSign
                             ) ▶₀ #t2.3 )
                        case Rep_1_111111
                        solve( State_1111111111111( ~lock8.2, ~prog_1.2, ~prog_1111111.2,
                                                    ~prog_111111111.1, a.1, b.1, kEnc, kSign, m, seq.1
                               ) ▶₀ #t2.4 )
                          case out_r_MH_SH_senc_seq_m_pad_mac_MH_SH_seq_m_pad_kSign_kEnc__111111111111
                          by contradiction /* cyclic */
                        qed
                      qed
                    qed
                  qed
                qed
              qed
            qed
          qed
        qed
      qed
    qed
  qed
qed

/* All well-formedness checks were successful. */

end
/* Output
maude tool: 'maude'
 checking version: 2.7.1. OK.
 checking installation: OK.
SAPIC tool: 'sapic'
Checking availablity ... OK.


analyzing: case-studies-sapic-regression/SCADA/opc_ua_secure_conversation.spthy

------------------------------------------------------------------------------
analyzed: case-studies-sapic-regression/SCADA/opc_ua_secure_conversation.spthy

  output:          case-studies-sapic-regression/SCADA/opc_ua_secure_conversation.spthy.tmp
  processing time: 16.127718511s
  Executable (exists-trace): verified (52 steps)
  all_received_were_sent (all-traces): verified (16 steps)
  all_received_were_sent_injective (all-traces): verified (156 steps)
  order (all-traces): verified (162 steps)
  delivery (all-traces): verified (15 steps)
  delivery_order (all-traces): verified (70 steps)

------------------------------------------------------------------------------

==============================================================================
summary of summaries:

analyzed: case-studies-sapic-regression/SCADA/opc_ua_secure_conversation.spthy

  output:          case-studies-sapic-regression/SCADA/opc_ua_secure_conversation.spthy.tmp
  processing time: 16.127718511s
  Executable (exists-trace): verified (52 steps)
  all_received_were_sent (all-traces): verified (16 steps)
  all_received_were_sent_injective (all-traces): verified (156 steps)
  order (all-traces): verified (162 steps)
  delivery (all-traces): verified (15 steps)
  delivery_order (all-traces): verified (70 steps)

==============================================================================
*/
